<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>username = "benchmarker";

clients = 1;
connected = 0;

//details for clients
server_ip      = "127.0.0.1"//"82.39.79.35"; 
server_port    = 24000;
req_rate_ping  = 30

//Connect
server_socket       = wn_connect(server_ip, server_port)

ping_history_limit  = 40
for (i=0; i&lt;ping_history_limit; i+=1)
{
    pings[i] = 0;
    instances[i] = 0
}

instance_create(x,y,obj_Network_graph)

//list of clients
nodes = ds_map_create();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



//client creation
if (instance_number(obj_Network_controller) &lt; clients)
{
    var nodeid;
    nodeid = instance_create(x,y,obj_Network_controller);
    nodeid.client_name = "client_"+string(instance_number(obj_Network_controller))
    ds_map_add(nodes,newnode.client_name,nodeid)
}

if keyboard_check(vk_up)
{
    req_rate_ping += 1
}
else if keyboard_check(vk_down) &amp;&amp; req_rate_ping &gt; 1
{
    req_rate_ping -= 1
}
else if keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_control)
{
    clients += 1
}
else if keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_control) &amp;&amp; clients &gt; 1
{
    clients -= 1
}
else if (keyboard_check_pressed(vk_right) &amp;&amp; keyboard_check(vk_control))
{
    clients += 100
}
else if (keyboard_check_pressed(vk_left) &amp;&amp; keyboard_check(vk_control) &amp;&amp; clients &gt; 100)
{
    clients -= 100
}

//check # of connected clients
connected = 0;
with (obj_Network_controller)
{
    if (client_id != -1) {obj_Controller.connected += 1}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(wn_receive_message(server_socket))
{
    var msg_type=wn_msgtype("S2C",wn_buffer_read());
    var sender_name = wn_buffer_read();
    
    switch(msg_type)
    {
        case "confirm_client_id":
            //respond with our username
            var senderid
            senderid = ds_map_find_value(nodes,sender_name)
            if instance_exists(senderid)
            {
                with (senderid)
                {
                    var server_socket = obj_Controller.server_socket
                    wn_clear_buffer();
                    wn_buffer_write(wn_msgtype("C2S", "initial_client_details"));
                    wn_buffer_write(client_name);
                    wn_send_message(server_socket)
                }
            }
            break;
            
        case "chat_message":
            var senderid
            senderid = ds_map_find_value(nodes,sender_name)
            var chat_message = wn_buffer_read();
            if instance_exists(senderid)
            {
                with (senderid)
                {                    
                    obj_Chatbox.chat_contents = add_line(obj_Chatbox.chat_contents, sender_name, chat_message, c_white);
                }
            }
            
            break;
        
        case "ping":
            var senderid
            senderid = ds_map_find_value(nodes,sender_name)
            var ping_starttime = wn_buffer_read();
            if instance_exists(senderid)
            {
                with (senderid)
                {
                    //store time (first shift each ping in history by 1)
                    for (i=1; i&lt;ping_history_limit; i+=1)
                    {
                        ping[i-1] = ping[i]
                        instances[i-1] = instances[i]
                    }
                    ping[ping_history_limit-1] = (string(get_timer()/1000) - ping_starttime)
                    instances[ping_history_limit-1] = instance_number(obj_Network_controller)
                }
            }
            pings = calc_total_pings()
            
            break;
            
        case "client_count":
            client_count = wn_buffer_read();
                        
            break;
            
        case "request_count":
            request_count = wn_buffer_read();
            
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black)
draw_rectangle(20-4,20-2,20+4+string_width("User: "+username),20+2+string_height("User: "+username),0)
draw_set_color(c_white)
draw_set_halign(fa_left);
draw_text(20,20,"User: "+username);

if keyboard_check(vk_space)
{
    draw_set_color(c_gray)
    draw_line(mouse_x,0,mouse_x,room_height)
    draw_line(0,mouse_y,room_width,mouse_y)
    draw_text(mouse_x + 14,mouse_y - 20, "("+string(mouse_x)+", "+string(mouse_y)+")")
}

//total average ping over all pings and network controllers
var totalavgping = -1
var totaldevping = max_value(pings) - min_value(pings)
if (array_length_1d(pings) == ping_history_limit)
draw_set_color(c_white)
draw_text(room_width/2,room_height/2,string(array_length_1d(pings))+", "+string(ping_history_limit))
for (i=0; i&lt;ping_history_limit; i+=1)
{
    totalavgping += pings[i]
}
totalavgping /= ping_history_limit

//content
var x0          = 20
var y0          = 60
var lines;
lines[0] = "CLIENT DETAILS"
lines[1] = "CPU: "+string(fps_real)+" iterations/s"
lines[2] = "FPS: "+string(fps)+" frames/s"
lines[3] = "clients: "+string(clients)
lines[4] = "real_clients: "+string(instance_number(obj_Network_controller))
lines[5] = "global_clients; "+string(client_count)
lines[6] = "average: "+string(totalavgping)
lines[7] = "deviation: "+string(totaldevping)
lines[8] = "ping-rate/s: "+string(room_speed / req_rate_ping)
lines[9] = "total req/sec: "+string(clients * req_rate_ping)
lines[10] = "ping count: "+string(array_length_1d(pings))

if button_pressed(205,50,"-100 clients",c_white,c_black) &amp;&amp; clients &gt; 100
{
    clients -= 100
}
if button_pressed(310,50,"+100 clients",c_white,c_black)
{
    clients += 100
}
if button_pressed(205,90,"-ping",c_white,c_black) &amp;&amp; req_rate_ping &gt; 1
{
    req_rate_ping -= 1
}
if button_pressed(310,90,"+ping",c_white,c_black)
{
    req_rate_ping += 1
}

draw_data(x0,y0,lines)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
