<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_NetworkController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Our client ID as assigned by server
client_id           = instance_number(obj_Network_controller);
client_name         = "client_"+string(instance_number(obj_Network_controller))

//Server IP and port
server_ip           = obj_Controller.server_ip; 
server_port         = obj_Controller.server_port;
server_socket = -1
//Connect
server_socket       = obj_Controller.server_socket;//wn_connect(server_ip, server_port)

client_clock        = 0;
avg_ping            = 0;
ping_history_limit  = 40
req_rate_ping       = obj_Controller.req_rate_ping //send x pings per second
for (i=0; i&lt;ping_history_limit; i+=1)
{
    ping[i] = 0
    instances[i] = instance_number(obj_Network_controller)
}

//Server details
update_timer        = room_speed //requests server-update every second

//track item count
item_count          = instance_number(obj_Network_controller)

//client with id=0 also checks global client counts
client_count = 0
global_clients_timer = 0
global_clients_limit = 60

//inform server about joining
wn_clear_buffer();
wn_buffer_write(wn_msgtype("C2S","new_virtual_client"));
wn_buffer_write(client_name);
wn_send_message(server_socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//inform server about leaving
wn_clear_buffer();
wn_buffer_write(wn_msgtype("C2S","remove_virtual_client"));
wn_buffer_write(client_name);
wn_send_message(server_socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//client destruction
if (obj_Controller.clients &lt; instance_number(obj_Network_controller) &amp;&amp; client_name == "client_"+string(instance_number(obj_Network_controller)))
{
    instance_destroy();
}

//send ping requests
req_rate_ping       = obj_Controller.req_rate_ping //send x pings per second
if ((client_clock mod req_rate_ping) == 0)
{   
    wn_clear_buffer();
    wn_buffer_write(wn_msgtype("C2S","ping"));
    wn_buffer_write(client_name);
    wn_buffer_write(string(get_timer()/1000)); //write current client time in ms
    wn_send_message(server_socket);
}

if (client_id == 1)
{
    global_clients_timer += 1
    if global_clients_timer mod global_clients_limit == 0
    {
        wn_clear_buffer();
        wn_buffer_write(wn_msgtype("C2S","client_count"));
        wn_buffer_write(username);
        wn_send_message(server_socket);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//always increment clock
client_clock += 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//send disconnect-client msg
show_message("disconnect client");
wn_buffer_write(wn_msgtype("C2S", "client_disconnects"));
wn_send_message(server_socket)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw virtual client details
var x0 = 30
var y0 = 480
var margin = 18
draw_set_color(c_black)
pingstring = client_name+" png: "
var printlim = 7
var printdistance = 75
draw_set_font(ft_mini)
draw_text(x0,y0+item_count*margin,pingstring)
for (j=0; j&lt;min(array_length_1d(ping),printlim); j+=1)
{
    draw_text(x0+20+(j+1)*printdistance,y0+item_count*margin,ping[j])
}
draw_set_font(ft_main)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
