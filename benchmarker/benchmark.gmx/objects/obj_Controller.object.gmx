<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>username = "benchmarker-x";

clients = 0;
connected = 0;

//details for clients
server_ip      = "82.39.79.35"; 
server_port    = 24000;
req_rate_ping  = 60

ping_history_limit  = 40

for (i=0; i&lt;ping_history_limit; i+=1)
{
    pings[i] = 0;
}

instance_create(x,y,obj_Network_graph)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//calculate average pings
//re-init
for (i=0; i&lt;array_length_1d(pings); i+=1)
{
    pings[i] = 0
}
//get total
with (obj_Network_controller)
{
    //add all pings
    for (i=0; i&lt;array_length_1d(ping); i+=1)
    {
        other.pings[i] += ping[i];
    }
}
//average all pings
if (instance_number(obj_Network_controller) &gt; 0)
{
    for (i=0; i&lt;array_length_1d(pings); i+=1)
    {
        pings[i] /= instance_number(obj_Network_controller);
    }
}


//client creation
if (instance_number(obj_Network_controller) &lt; clients)
{
    instance_create(x,y,obj_Network_controller);
}

//client destruction
if (clients &lt; instance_number(obj_Network_controller))
{
    with (obj_Network_controller)
    {
        instance_destroy();
    }
}

if keyboard_check_pressed(vk_up)
{
    clients += 1
}
else if keyboard_check_pressed(vk_down)
{
    clients -= 1
}

//check # of connected clients
connected = 0;
with (obj_Network_controller)
{
    if (client_id != -1) {obj_Controller.connected += 1}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black)
draw_rectangle(20-4,20-2,20+4+string_width("User: "+username),20+2+string_height("User: "+username),0)
draw_set_color(c_white)
draw_set_halign(fa_left);
draw_text(20,20,"User: "+username);

if keyboard_check(vk_space)
{
    draw_set_color(c_gray)
    draw_line(mouse_x,0,mouse_x,room_height)
    draw_line(0,mouse_y,room_width,mouse_y)
    draw_text(mouse_x + 14,mouse_y - 20, "("+string(mouse_x)+", "+string(mouse_y)+")")
}

//content
var x0          = 20
var y0          = 60
var lines;
lines[0] = "CLIENT DETAILS"
lines[1] = "CPU: "+string(fps_real)+" iterations/s"
lines[2] = "FPS: "+string(fps)+" frames/s"
lines[3] = "clients: "+string(clients)
lines[4] = "real_clients: "+string(instance_number(obj_Network_controller))
lines[5] = "clients-connected: "+string(connected*clients)
lines[6] = "clients-disconnected: "+string(clients - connected*clients)
lines[7] = "ping-rate/s: "+string(room_speed / req_rate_ping)
lines[8] = "total req/sec: "+string(clients * req_rate_ping)



draw_data(x0,y0,lines)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
