<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var address, name, port;

address = "127.0.0.1" //"82.39.79.35"; 
name = obj_Controller.username
port = 24000;


socket = wn_connect(server_ip, server_port);

connected = false;

global.server_delaystarted = false;
global.server_delay = 0;

player_id = 0;

//instance_create(random(room_width - 60) + 30, random(room_height - 60) + 30, obj_localplayer);
obj_tdPlayer.username = obj_Controller.username;


//////////////////////////////////////
/*
//Our client ID as assigned by server
client_id           = -1;

//Server IP and port
server_ip           = "127.0.0.1" //"82.39.79.35"; 
server_port         = 24000;

//Connect
connected           = false;
server_socket       = wn_connect(server_ip, server_port)
client_clock        = 0;
update_speed        = 1;

//other users
users = ds_map_create();
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket_update_write(socket);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var s, a, xx, yy, hs, vs, mx, my, dir, rm, arm, lvl;

if global.server_delaystarted {
    global.server_delay += 1;
}

// send position and speed
buffer_clear(global.buffer);
buffer_write_uint8(global.buffer, 12);
//STEP EVENT OF PLAYER SENDING STREAM OF DATA
with obj_tdPlayer {
    if id != other.id {
        buffer_write_float32(global.buffer, x);
        buffer_write_float32(global.buffer, y);
        buffer_write_float32(global.buffer, hspeed);
        buffer_write_float32(global.buffer, vspeed);
        buffer_write_float32(global.buffer, mouse_x);
        buffer_write_float32(global.buffer, mouse_y);
        buffer_write_string(global.buffer, td_direction);
        buffer_write_string(global.buffer, room_get_name(room));
        buffer_write_uint32(global.buffer, obj_Controller.armor_top);
        buffer_write_uint32(global.buffer, obj_Controller.ownlevel);
    }
}
socket_write_message(socket, global.buffer);

socket_update_read(socket);

while socket_read_message(socket, global.buffer) {
    a = buffer_read_uint8(global.buffer);
    switch(a) {
        
        case 11: // player id
            obj_tdPlayer.player_id = buffer_read_uint32(global.buffer);
        break;
        
        case 12: // move remote players
            global.server_delaystarted = true;
            global.server_delay -= 1;
            while !buffer_at_end(global.buffer) {
                a = buffer_read_uint32(global.buffer);
                xx = buffer_read_float32(global.buffer);
                yy = buffer_read_float32(global.buffer);
                hs = buffer_read_float32(global.buffer);
                vs = buffer_read_float32(global.buffer);
                mx = buffer_read_float32(global.buffer); //mouse_x
                my = buffer_read_float32(global.buffer); //mouse_y
                dir = buffer_read_string(global.buffer); //direction
                rm = buffer_read_string(global.buffer); //room
                arm = buffer_read_uint32(global.buffer); //armor
                lvl = buffer_read_uint32(global.buffer); //level
                with obj_remoteplayer {
                    if server_id = a {
                        server_x = xx;
                        server_y = yy;
                        server_hspeed = hs;
                        server_vspeed = vs;
                        server_mousex = mx;
                        server_mousey = my;
                        td_direction = dir;
                        server_room = rm;
                        server_armor = arm;
                        server_level = lvl;
                    }
                }
            }
        break;
        
        case 13: // create remote player
            a = instance_create(0, 0, obj_remoteplayer);
            a.server_id = buffer_read_uint32(global.buffer);
            a.name = buffer_read_string(global.buffer);
        break;
        
        case 14: // destroy remote player
            a = buffer_read_uint32(global.buffer);
            with obj_remoteplayer {
                if server_id = a {
                    instance_destroy();
                }
            }
        break;
        
        
        
        //Magic Skills
        //Meteor
        case 30: 
            var pid, xpos, ypos, xx, yy, a;
            pid = buffer_read_uint32(global.buffer);
            xx=buffer_read_float32(global.buffer);
            yy=buffer_read_float32(global.buffer);
            xpos = buffer_read_float32(global.buffer);
            ypos = buffer_read_float32(global.buffer);
            a=instance_create(xpos,ypos,obj_MMeteor);
            a.xx=xx;
            a.yy=yy;
            a.xpos=xpos;
            a.ypos=ypos;
            a.pid=pid;
        break;        
        
        case 31: 
            var pid, xpos, ypos, xx, yy, a;
            pid = buffer_read_uint32(global.buffer);
            xx=buffer_read_float32(global.buffer);
            yy=buffer_read_float32(global.buffer);
            xpos = buffer_read_float32(global.buffer);
            ypos = buffer_read_float32(global.buffer);
            a = instance_create(xpos,ypos,obj_MGaleM1);
            a.xx = xx;
            a.yy = yy;
            a.xpos = xpos;
            a.ypos = ypos;
            a.pid=pid;
        break;
        
        
        case 32:
            var pid, xx, yy, a;
            pid = buffer_read_uint32(global.buffer);
            xx=buffer_read_float32(global.buffer);
            yy=buffer_read_float32(global.buffer);
            a = instance_create(xx,yy,obj_MIceBlaze);
            a.xx=xx
            a.yy=yy
            a.pid=pid;
        break;
        
        case 33:
            var pid, xx, yy, a;
            pid = buffer_read_uint32(global.buffer);
            xx=buffer_read_float32(global.buffer);
            yy=buffer_read_float32(global.buffer);
            a = instance_create(xx,yy,obj_MEarthSpikes);
            a.xx=xx
            a.yy=yy
            a.pid=pid;
        break;
        
        case 34:
            var pid, xx, yy, a;
            pid = buffer_read_uint32(global.buffer);
            xx=buffer_read_float32(global.buffer);
            yy=buffer_read_float32(global.buffer);
            a = instance_create(xx,yy,obj_MGhastlyFence);
            a.xx=xx;
            a.yy=yy;
            a.pid=pid;
        break;
        
        case 35:
            var pid, xx, yy, a;
            pid = buffer_read_uint32(global.buffer);
            xx=buffer_read_float32(global.buffer);
            yy=buffer_read_float32(global.buffer);
            a = instance_create(xx,yy,obj_MInferno);
            a.xx = xx
            a.yy = yy
            a.pid=pid;
        break;
        
        case 36:
            var pid, xx, yy, a;
            pid = buffer_read_uint32(global.buffer);
            xx=buffer_read_float32(global.buffer);
            yy=buffer_read_float32(global.buffer);
            a = instance_create(xx,yy,obj_MSunflash);
            a.xx = xx
            a.yy = yy
            a.pid=pid;
        break;
    }
}

s = socket_get_state(socket);
if s = 2 and !connected {
    connected = true;
}
if s = 4 {
    show_message("Multiplayer connection closed.");
        instance_destroy();
    exit;
}
if s = 5{
    socket_reset(socket);
    if connected {
        show_message("Connection lost.");
        instance_destroy();
    } else {
        show_message("Could not connect to server.");
        instance_destroy();
    }
    exit;
}

global.server_delay = max(-3, min(10, global.server_delay * 0.95));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket_destroy(socket);
buffer_destroy(global.buffer);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_set_valign(fa_middle);

draw_set_color(c_black);

with obj_remoteplayer {
    if room_get_name(room) = server_room
    {
        //draw_circle(server_x, server_y, 4, true);
        //draw_circle(x, y, 15, true);
        //draw_text(round(x), round(y - 25), name);
        //draw_text(x,y+25,td_direction);
        draw_set_font(ft_NPC);
        draw_set_alpha(0.45)
        draw_set_color(c_white)
        draw_roundrect(server_x-22-0.5*(string_width(name)+string_width(server_level)),server_y-34,server_x+22+0.5*(string_width(name)+string_width(server_level)),server_y-32+string_height(name),0)
        draw_set_alpha(1)
        draw_set_color(c_black);
        draw_text(x,y-26,string("Lv_")+string(server_level)+string(": ")+string(name));
    }
    
}

draw_set_color(c_black);
with obj_tdPlayer {
    //draw_circle(x, y, 4, true);
    //draw_circle(x, y, 15, true);
    //draw_text(round(x), round(y - 25), username);
    //draw_text(x,y+25,td_direction); 
    draw_set_font(ft_NPC);
    draw_set_alpha(0.45)
    draw_set_color(c_white)
    draw_roundrect(x-22-0.5*(string_width(username)+string_width(obj_Controller.ownlevel)),y-34,x+22+0.5*(string_width(username)+string_width(obj_Controller.ownlevel)),y-32+string_height(username),0)
    draw_set_alpha(1)
    draw_set_color(c_black);
    draw_text(x,y-26,string("Lv_")+string(obj_Controller.ownlevel)+string(": ")+string(username));
}

draw_set_halign(fa_left)
draw_set_valign(fa_top);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
