<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flashalpha=0;

created=0

if room != room_Initials &amp;&amp; created=0
{

    created=1
    
    centerx=(view_xview[0]+500);
    centery=(view_yview[0]+590);
    
    //set initial values in order to prevent code collision
    player_tdmovespeed = 0;
    player_pmovespeed  = 0;
    td_direction = 0;
    
    //Button Response
    mouseover='neutral';
    //Button Activation
    btnactive='neutral';
    //Onscreen Buttons activation
    btnchar=0;
    btnskill=0;
    btninv=0;
    btnquest=0;
    
    //flashing box around button when upgradable content
    flashalpha=0;
    
    
    
    //Draw Buttons
    instance_create(centerx-380,centery-2,obj_BtnChar);
    instance_create(centerx-250,centery-2,obj_BtnSkill);
    instance_create(centerx-120,centery-2,obj_BtnInv);
    instance_create(centerx+010,centery-2,obj_BtnQuest);
    instance_create(centerx+140,centery-2,obj_BtnMap);
    instance_create(centerx+270,centery-2,obj_BtnMenu);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>areay=20; // hoogte van "balk" die pakbaar is.
grab=false;
grabbable=true;
wxx=0;
wyy=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (grab){
    window_set_position(display_mouse_get_x()-wxx,display_mouse_get_y()-wyy);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if created=1 &amp;&amp; room != room_Initials{

//Downloading data from obj_Controller into self
if instance_exists(obj_Controller)
{
 player_tdmovespeed = obj_Controller.tdmovespeed;
 player_pmovespeed = obj_Controller.pmovespeed;
}

//Importing data from self into tdPlayer
if instance_exists(obj_tdPlayer)
{
 obj_tdPlayer.tdmovespeed = player_tdmovespeed;
 td_direction = obj_tdPlayer.td_direction;
}

//Importing data from self to pPlayer
if instance_exists(obj_pPlayer)
{
 obj_pPlayer.tdmovespeed = player_pmovespeed;
 td_direction = obj_pPlayer.td_direction;
}

if btnactive='menu' {global.pause=1} else {global.pause=0}

//create menu when activated
if btnactive='menu' &amp;&amp; !instance_exists(obj_Menu)
{
{instance_create(centerx,centery-300,obj_Menu);}
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!window_get_fullscreen()){
    // Move window
    if (mouse_y&lt;view_yview[0]+areay &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; grabbable){
        grab=true;
        wxx=display_mouse_get_x()-window_get_x();
        wyy=display_mouse_get_y()-window_get_y();
    }
    if (mouse_check_button_released(mb_left)){
        grab=false;
    }
}
    else {
    grab=false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>created=0

if room != room_Initials &amp;&amp; created=0{

created=1

centerx=(view_xview[0]+500);
centery=(view_yview[0]+590);

//set initial values in order to prevent code collision
player_tdmovespeed = 0;
td_direction = 0;

//Draw Buttons
if !instance_exists(obj_BtnChar)instance_create(centerx-380,centery-2,obj_BtnChar);
if !instance_exists(obj_BtnSkill)instance_create(centerx-250,centery-2,obj_BtnSkill);
if !instance_exists(obj_BtnInv)instance_create(centerx-120,centery-2,obj_BtnInv);
if !instance_exists(obj_BtnQuest)instance_create(centerx+010,centery-2,obj_BtnQuest);
if !instance_exists(obj_BtnMap)instance_create(centerx+140,centery-2,obj_BtnMap);
if !instance_exists(obj_BtnMenu) {instance_create(centerx+270,centery-2,obj_BtnMenu);}
if !instance_exists(obj_AddSkillbtnBG) {instance_create(centerx+350,centery-10,obj_AddSkillbtnBG)}

//Button Response
mouseover='neutral';
//Button Activation
btnactive='neutral';

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if created=1 &amp;&amp; room != room_Initials 
{


    //set centerpoint from UID
    centerx=(view_xview[0]+500);
    centery=(view_yview[0]+590);
    
    draw_set_halign(fa_center);
    draw_set_font(ft_menu2);
    
    //Draw UID
    draw_sprite(spr_BottomUID,image_index,centerx,centery);
    
    //Draw Healthbars
    
    //background square
    draw_set_color(c_black)
    draw_set_alpha(0.7)
    draw_rectangle(centerx-358,centery-38,centerx-162,centery-10,0)
    draw_set_color(c_yellow)
    draw_set_alpha(0.5)
    
    //Health
    draw_text(centerx-345,centery-37,"HP:")
    //draw_healthbar(centerx-330,centery-35,centerx-165,centery-25,obj_Controller.ownhealthpercent,c_black,c_green,c_green,0,1,0);14600892
    draw_healthbar(centerx-330,centery-35,centerx-165,centery-25,obj_Controller.ownhealthpercent,c_black,10420128 ,10420128 ,0,1,0);
    draw_healthbar(centerx-330,centery-33,centerx-165,centery-25,obj_Controller.ownhealthpercent,c_black,65280 ,65280 ,0,1,0);
    draw_healthbar(centerx-330,centery-31,centerx-165,centery-25,obj_Controller.ownhealthpercent,c_black,61952 ,61952 ,0,1,0);
    draw_healthbar(centerx-330,centery-29,centerx-165,centery-25,obj_Controller.ownhealthpercent,c_black,54272 ,54272 ,0,1,0);
    draw_healthbar(centerx-330,centery-27,centerx-165,centery-25,obj_Controller.ownhealthpercent,c_black,44544 ,44544 ,0,1,0);
    draw_set_font(ft_menu3)
    draw_text(centerx-250,centery-35,string(obj_Controller.ownhealth)+string(" / ")+string(obj_Controller.ownhealthtotal))
    draw_set_font(ft_menu2)
    
    //SP
    draw_set_font(ft_menu3)
    draw_text(centerx-345,centery-22,"SP:")
    draw_set_font(ft_menu2)
    draw_healthbar(centerx-330,centery-20,centerx-165,centery-12,obj_Controller.ownsppercent,c_black,16766976,16766976,0,1,0)
    draw_healthbar(centerx-330,centery-18,centerx-165,centery-12,obj_Controller.ownsppercent,c_black,16761344,16761344,0,1,0)
    draw_healthbar(centerx-330,centery-16,centerx-165,centery-12,obj_Controller.ownsppercent,c_black,16754176,16754176,0,1,0)
    draw_healthbar(centerx-330,centery-14,centerx-165,centery-12,obj_Controller.ownsppercent,c_black,16745216,16745216,0,1,0)
    draw_set_font(ft_menu3)
    draw_text(centerx-250,centery-21,string(obj_Controller.ownsp)+string(" / ")+string(obj_Controller.ownsptotal))
    draw_set_font(ft_menu2)
    
    //Draw Level
    draw_set_font(ft_menu4)
    draw_set_color(c_black)
    draw_set_alpha(1)
    draw_text(centerx-130,centery-35,string("Lv ")+string(obj_Controller.ownlevel));
    
    //Experience
    draw_set_alpha(1)
    draw_healthbar(centerx-326,centery+26,centerx+326,centery+28,obj_Controller.ownexppercent,c_black,c_white,c_white,0,0,0)
    
    //Attack Timer
    draw_set_alpha(1)
    //draw_rectangle(view_xview[0],view_yview[0]+300,view_xview[0]+100,view_yview[0]+540,0)
    
    draw_set_color(c_black)
    draw_rectangle(view_xview[0]+15,view_yview[0]+518,view_xview[0]+59,view_yview[0]+525,0)
    draw_rectangle(view_xview[0]+14,view_yview[0]+519,view_xview[0]+60,view_yview[0]+524,0)
    draw_rectangle(view_xview[0]+13,view_yview[0]+520,view_xview[0]+61,view_yview[0]+523,0)
    draw_rectangle(view_xview[0]+12,view_yview[0]+521,view_xview[0]+62,view_yview[0]+522,0)
    
    
    if instance_exists(obj_tdPlayer)
    {
        //Draw status for chain skill 1
        if obj_tdPlayer.learnchain1 &gt;= 1
        {
            if obj_tdPlayer.chain1!=1
            {draw_set_color(c_red)} 
            else if obj_tdPlayer.atktime &lt;=0 {draw_set_color(c_lime)}
            else if obj_tdPlayer.atktime &gt; 0 {draw_set_color(c_yellow)}
            draw_rectangle(view_xview[0]+20,view_yview[0]+520,view_xview[0]+24,view_yview[0]+523,0)
            
            if obj_tdPlayer.chain1=1
            {draw_healthbar(view_xview[0]+20,view_yview[0]+420,view_xview[0]+24,view_yview[0]+510,(obj_tdPlayer.atktime/obj_tdPlayer.atktimemax)*100,c_black,c_lime,c_yellow,3,1,1)}
            else
            {draw_healthbar(view_xview[0]+20,view_yview[0]+420,view_xview[0]+24,view_yview[0]+510,100,c_black,c_lime,c_yellow,3,1,1)}
        }
        
        
        //Draw status for chain skill 2
        if obj_tdPlayer.learnchain1 &gt;= 2
        {
            if obj_tdPlayer.chain1!=2
            {draw_set_color(c_red)} 
            else if obj_tdPlayer.atktime &lt;=0 {draw_set_color(c_lime)}
            else if obj_tdPlayer.atktime &gt; 0 {draw_set_color(c_yellow)}
            draw_rectangle(view_xview[0]+30,view_yview[0]+520,view_xview[0]+34,view_yview[0]+523,0)
            
            if obj_tdPlayer.chain1=2
            {draw_healthbar(view_xview[0]+30,view_yview[0]+420,view_xview[0]+34,view_yview[0]+510,(obj_tdPlayer.atktime/obj_tdPlayer.atktimemax)*100,c_black,c_lime,c_yellow,3,1,1)}
            else
            {draw_healthbar(view_xview[0]+30,view_yview[0]+420,view_xview[0]+34,view_yview[0]+510,100,c_black,c_lime,c_yellow,3,1,1)}
        }
        
        if obj_tdPlayer.learnchain1 &gt;= 3
        {
            //Draw status for chain skill 3
            if obj_tdPlayer.chain1!=3
            {draw_set_color(c_red)} 
            else if obj_tdPlayer.atktime &lt;=0 {draw_set_color(c_lime)}
            else if obj_tdPlayer.atktime &gt; 0 {draw_set_color(c_yellow)}
            draw_rectangle(view_xview[0]+40,view_yview[0]+520,view_xview[0]+44,view_yview[0]+523,0)
            
            if obj_tdPlayer.chain1=3
            {draw_healthbar(view_xview[0]+40,view_yview[0]+420,view_xview[0]+44,view_yview[0]+510,(obj_tdPlayer.atktime/obj_tdPlayer.atktimemax)*100,c_black,c_lime,c_yellow,3,1,1)}
            else
            {draw_healthbar(view_xview[0]+40,view_yview[0]+420,view_xview[0]+44,view_yview[0]+510,100,c_black,c_lime,c_yellow,3,1,1)}
        }
        
        //Draw status for chain skill 4
        if obj_tdPlayer.learnchain1 &gt;= 4
        {
            if obj_tdPlayer.chain1!=4
            {draw_set_color(c_red)} 
            else if obj_tdPlayer.atktime &lt;=0 {draw_set_color(c_lime)}
            else if obj_tdPlayer.atktime &gt; 0 {draw_set_color(c_yellow)}
            draw_rectangle(view_xview[0]+50,view_yview[0]+520,view_xview[0]+54,view_yview[0]+523,0)
            
            if obj_tdPlayer.chain1=4
            {draw_healthbar(view_xview[0]+50,view_yview[0]+420,view_xview[0]+54,view_yview[0]+510,(obj_tdPlayer.atktime/obj_tdPlayer.atktimemax)*100,c_black,c_lime,c_yellow,3,1,1)}
            else
            {draw_healthbar(view_xview[0]+50,view_yview[0]+420,view_xview[0]+54,view_yview[0]+510,100,c_black,c_lime,c_yellow,3,1,1)}
        }
    }
    
    //restore draw options
    draw_set_alpha(1)
    
    //Button Info
    scr_ButtonInfo();
    
    //Skillbar Info
    scr_SkillbarInfo();
    
    //Flashing buttons for upgrade
    flashalpha+=0.2;
    //Char
    if obj_Controller.ownstatpoint &gt; 0
    {
        draw_set_color(c_orange)
        draw_set_alpha(1+0.5*sin(flashalpha));
        draw_rectangle(centerx-380,centery-1,centerx-380+110,centery-2+16,1)
        draw_set_color(c_black)
        draw_set_alpha(1);
    }
    
    
    
    
    //Menu
    
    
    
    
    draw_set_halign(fa_left);
    draw_set_color(c_black);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!window_get_fullscreen())
{
    draw_set_alpha(0.5);
    draw_set_color(c_black)
    draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+1000,view_yview[0]+areay,0);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
