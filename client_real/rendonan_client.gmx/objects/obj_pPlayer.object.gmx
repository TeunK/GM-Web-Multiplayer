<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tdPlayerA0Horizontal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists(obj_Credits2)
{
    
    
    //Keep Player in main view
    //if !instance_exists(obj_pPlayerStalker)
    //{instance_create(x,y,obj_pPlayerStalker)}
    //if !instance_exists(obj_pPlayerShadow)
    //{instance_create(x,y,obj_pPlayerShadow)}
    
    obj_Clock.hour=12;
    
    if obj_Clock.hour &lt;= 18 &amp;&amp; obj_Clock.hour &gt;=4
    {light="off"} else {light="on"}
    
    //set movement credentials
    td_direction='neutral';
    td_lastdirection='neutral';
    
    
    
    //set NPC credentials
    td_cantalkwith='neutral';
    
    //----------------------------\\
    //LOAD STATS FROM OBJ_CONTROLLER
    //----------------------------\\
    
    //set initials to avoid code collisions (gets reset by obj_Menuinfo)
    pmovespeed=obj_Controller.pmovespeed
    
    //Set Neutral Movement sprite
    if td_direction != 'neutral'
    {image_speed=0.5}
    else
    {image_speed=0}
    
    
    
    //JUMPING INITIALS
    jump=0;
    inair=0;
    jumpcount=20;
    yy=y
    jumpy=(y-60)
    goup=0
    godown=0
    up=0
    down=0
    height=y-60
    lowth=y
    
    
    //BUFFS
    buff1=0 // Windwalk         [Movement]
    
    buff2=0 // Rage Outfall     [Damage]
    
    buff3=0 // Invoke Energy    [Heal]
    
    buff4=0 // Adamantium Skin  [Defence]
    
    buff5=0 // 
    
    buff6=0 //
}
else
{
    instance_create(x,y,obj_CreditsPlayer);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_PlatformMovement();
scr_PlatformJump();
scr_PlatformSkillBuffs();
scr_MapBorder();

//Regular NPC Interaction
scr_IntGeneral();
scr_IntRoomTown1();

//Quests:
scr_Quest1();

//Set Neutral Movement sprite
if td_direction != 'neutral' &amp;&amp; jump=0
{
image_speed=0.5
}
else
{image_speed=0}

//Clock aka daytime data
if obj_Clock.hour &lt;= 18 &amp;&amp; obj_Clock.hour &gt;=6
{light="off"} else {light="on"}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/***************************************************
        ############## QUEST DATA ##############
 ***************************************************/
 
 if obj_Controller.Questactive[1]=0
 {
 
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !place_free(x,y+vspeed) {move_contact(270)} 
vspeed=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw light around player when dark
if light="on"
{
draw_light_circle(obj_pPlayer.x,obj_pPlayer.y,70,c_white,0.01,obj_pPlayer.x,obj_pPlayer.y,180,c_white,0.02,10);
}


/***************************************************
  ################# Draw Player ####################
 ***************************************************/
 
var up, scewup, horizontal, scewdown, down;
if obj_Controller.armor_top=0
{
    up=spr_tdPlayerA0VerticalUp;
    scewup=spr_tdPlayerA0ScewUp;
    horizontal=spr_tdPlayerA0Horizontal;
    scewdown=spr_tdPlayerA0ScewDown;
    down=spr_tdPlayerA0VerticalDown; 
}
else if obj_Controller.armor_top=1
{
    up=spr_tdPlayerA1VerticalUp;
    scewup=spr_tdPlayerA1ScewUp;
    horizontal=spr_tdPlayerA1Horizontal;
    scewdown=spr_tdPlayerA1ScewDown;
    down=spr_tdPlayerA1VerticalDown; 
}
else if obj_Controller.armor_top=2
{
    up=spr_tdPlayerA2VerticalUp;
    scewup=spr_tdPlayerA2ScewUp;
    horizontal=spr_tdPlayerA2Horizontal;
    scewdown=spr_tdPlayerA2ScewDown;
    down=spr_tdPlayerA2VerticalDown; 
}
else
{
    up=spr_tdPlayerA0VerticalUp;
    scewup=spr_tdPlayerA0ScewUp;
    horizontal=spr_tdPlayerA0Horizontal;
    scewdown=spr_tdPlayerA0ScewDown;
    down=spr_tdPlayerA0VerticalDown; 
}

/***************************************************
  ################# Draw Player ####################
 ***************************************************/

 
//Movement Neutral
if td_direction != 'right'
&amp;&amp; td_direction != 'left' 
&amp;&amp; td_direction != 'right-up' 
&amp;&amp; td_direction != 'right-down' 
&amp;&amp; td_direction != 'left-up' 
&amp;&amp; td_direction != 'left-down' 
&amp;&amp; td_direction != 'up'
&amp;&amp; td_direction != 'down'
&amp;&amp; td_lastdirection = 'neutral'
{draw_sprite(horizontal,image_index,x,y); td_direction='neutral'};

//Movement up
if td_direction='up' || (td_lastdirection='up' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(up,image_index,x,y,1,1,0,c_white,1);td_lastdirection='up'}

//Movement scew right up
if td_direction='right-up' || (td_lastdirection='right-up' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(scewup,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right-up'};

//Movement right
if td_direction='right' || (td_lastdirection='right' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(horizontal,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right'};

//Movement scew right down
if td_direction='right-down' || (td_lastdirection='right-down' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(scewdown,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right-down'};

//Movement down
if td_direction='down' || (td_lastdirection='down' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(down,image_index,x,y,1,1,0,c_white,1);td_lastdirection='down'}

//Movement scew left down
if td_direction='left-down' || (td_lastdirection='left-down' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(spr_tdPlayerScewDown,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left-down'};

//Movement Left
if td_direction='left' || (td_lastdirection='left' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(horizontal,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left'};

//Movement scew left up
if td_direction='left-up' || (td_lastdirection='left-up' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(scewup,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left-up'};



/*
argument0    x1: x position of circle 1
argument1    y1: y poistion of circle 1
argument2    r1: radius of circle 1
argument3    c1: color of circle 1
argument4    a1: transparency of circle1. Between 0 and 1
argument5    x2: x position of circle 2
argument6    y2: y position of circle 2
argument7    r2: radius of circle 2
argument8    c2: color of circle 2
argument9    a2: transparency of circle 2. Between 0 and 1
argument10   quantity: the number of circles the light is composed of
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
