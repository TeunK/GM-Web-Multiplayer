<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server_x = 0;
server_y = 0;
server_hspeed = 0;
server_vspeed = 0;
server_mousex = 0;
server_mousey = 0;
server_id   =   0;
server_magic = -1; //ID which skill is being cast by the player. 0=meteor, 1=gale etc. monitored by multiplayer skills
server_level = 0;

td_direction="neutral";
td_lastdirection = 'neutral'
server_room="room_Town1";
server_armor=0;

magesprite=0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = server_x + server_hspeed * global.server_delay;
y = server_y + server_vspeed * global.server_delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set Neutral Movement sprite
if !instance_exists(obj_Multiplayer) {instance_destroy();}

if td_direction != 'neutral'
{
    image_speed=0.5
}
else
{
    image_speed=0
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_get_name(room) = server_room
{

    //Draw light around player when dark
    if obj_tdPlayer.light="on"
    {
        draw_light_circle(x,y,70,c_white,0.01,x,y,180,c_white,0.02,10);
    }
    
    var up, scewup, horizontal, scewdown, down;
    
    if server_armor=0
    {
        up=spr_tdPlayerA0VerticalUp;
        scewup=spr_tdPlayerA0ScewUp;
        horizontal=spr_tdPlayerA0Horizontal;
        scewdown=spr_tdPlayerA0ScewDown;
        down=spr_tdPlayerA0VerticalDown; 
    }
    else if server_armor=1
    {
        up=spr_tdPlayerA1VerticalUp;
        scewup=spr_tdPlayerA1ScewUp;
        horizontal=spr_tdPlayerA1Horizontal;
        scewdown=spr_tdPlayerA1ScewDown;
        down=spr_tdPlayerA1VerticalDown; 
    }
    else if server_armor=2
    {
        up=spr_tdPlayerA2VerticalUp;
        scewup=spr_tdPlayerA2ScewUp;
        horizontal=spr_tdPlayerA2Horizontal;
        scewdown=spr_tdPlayerA2ScewDown;
        down=spr_tdPlayerA2VerticalDown; 
    }
    else if server_armor=3
    {
        up=spr_tdPlayerA3VerticalUp;
        scewup=spr_tdPlayerA3ScewUp;
        horizontal=spr_tdPlayerA3Horizontal;
        scewdown=spr_tdPlayerA3ScewDown;
        down=spr_tdPlayerA3VerticalDown; 
    }
    else if server_armor=4
    {
        up=spr_tdPlayerA4VerticalUp;
        scewup=spr_tdPlayerA4ScewUp;
        horizontal=spr_tdPlayerA4Horizontal;
        scewdown=spr_tdPlayerA4ScewDown;
        down=spr_tdPlayerA4VerticalDown; 
    }
    else if server_armor=5
    {
        up=spr_tdPlayerA5VerticalUp;
        scewup=spr_tdPlayerA5ScewUp;
        horizontal=spr_tdPlayerA5Horizontal;
        scewdown=spr_tdPlayerA5ScewDown;
        down=spr_tdPlayerA5VerticalDown; 
    }
    else if server_armor=6
    {
        up=spr_tdPlayerA6VerticalUp;
        scewup=spr_tdPlayerA6ScewUp;
        horizontal=spr_tdPlayerA6Horizontal;
        scewdown=spr_tdPlayerA6ScewDown;
        down=spr_tdPlayerA6VerticalDown; 
    }
    else
    {
        up=spr_tdPlayerA0VerticalUp;
        scewup=spr_tdPlayerA0ScewUp;
        horizontal=spr_tdPlayerA0Horizontal;
        scewdown=spr_tdPlayerA0ScewDown;
        down=spr_tdPlayerA0VerticalDown; 
    }
    
     
    //Movement Neutral
    if td_direction != 'right'
    &amp;&amp; td_direction != 'left' 
    &amp;&amp; td_direction != 'right-up' 
    &amp;&amp; td_direction != 'right-down' 
    &amp;&amp; td_direction != 'left-up' 
    &amp;&amp; td_direction != 'left-down' 
    &amp;&amp; td_direction != 'up'
    &amp;&amp; td_direction != 'down'
    &amp;&amp; td_lastdirection = 'neutral'
    {draw_sprite(down,image_index,x,y); td_direction='neutral'};
    
    //Movement up
    if td_direction='up' || (td_lastdirection='up' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(up,image_index,x,y,1,1,0,c_white,1);td_lastdirection='up'}
    
    //Movement scew right up
    if td_direction='right-up' || (td_lastdirection='right-up' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(scewup,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right-up'};
    
    //Movement right
    if td_direction='right' || (td_lastdirection='right' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(horizontal,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right'};
    
    //Movement scew right down
    if td_direction='right-down' || (td_lastdirection='right-down' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(scewdown,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right-down'};
    
    //Movement down
    if td_direction='down' || (td_lastdirection='down' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(down,image_index,x,y,1,1,0,c_white,1);td_lastdirection='down'}
    
    //Movement scew left down
    if td_direction='left-down' || (td_lastdirection='left-down' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(scewdown,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left-down'};
    
    //Movement Left
    if td_direction='left' || (td_lastdirection='left' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(horizontal,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left'};
    
    //Movement scew left up
    if td_direction='left-up' || (td_lastdirection='left-up' &amp;&amp; td_direction='neutral')
    {draw_sprite_ext(scewup,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left-up'};
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_Controller.admin=1
{
    draw_set_color(c_black)
    draw_set_alpha(1)
    draw_line(server_mousex,0,server_mousex,room_height);
    draw_line(0,server_mousey,room_width,server_mousey);
    draw_text(server_mousex+10,server_mousey-20,name);
    //server_mousex = 0;
    //server_mousey = 0;
}

if server_magic != -1
{
    magesprite+=1;
    draw_sprite_ext(spr_MagicCursor,floor(magesprite/5),server_x,server_y,1,1,10*magesprite,c_white,0.6);
}
else
{
    magesprite=0;
}

//draw_text(x,y+30,server_magic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
