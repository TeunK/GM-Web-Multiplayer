<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = "earring";   //name of slot
color = c_black;    //drawing slot color
x_pos = 94;
y_pos = 282;





//item ID content (must receive from database); 
itemID=obj_Controller.slot_earring_ID;
// if itemID &gt; 0 {it is filled}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Data of each slot:

x: 270
y: 550

total: 14 slots

//type
slot1: earringslot2: head
slot3: shouldersslot4: top

slot5: Weaponslot6: glovesslot7: vambracesslot8: shield
slot9: ring1slot10: ring2slot11: ring3slot12: ring4
slot13: bootsslot14: legs


//location based on xview[0], yview[0]:
x1, y1, x1+20, y1+21


change 105 to 94, difference = -11x, +1y
s1: 105, 281, 125, 302
s2: 240, 281, 260, 302
s3: 105, 330, 125, 351
s4: 240, 330, 260, 351
s5: 036, 379, 
s6: 105, 379,
s7: 240, 379,
s8: 309, 379,
s9: 073, 428,
s10: 137, 428,
s11: 208, 428,
s12: 271, 428,
s13: 105, 477,
s14: 239, 477,

//NEW NUMBERZ
s1: 94, 282
s2: 229, 282
s3: 94, 331
s4: 229, 331
s5: 025, 380
s6: 94, 380
s7: 229 380
s8: 298, 380
s9: 062, 429
s10: 126, 429
s11: 197, 429
s12: 260, 429
s13: 94, 478
s14: 228, 478
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_InventoryBG)
{
    if obj_StatsBG.down=1
    {
    
        draw_set_color(color)
        draw_set_font(ft_menu3)
        //draw_rectangle(view_xview[0]+x_pos,view_yview[0]+y_pos,view_xview[0]+x_pos+20,view_yview[0]+y_pos+21,0)
        draw_sprite(spr_INVitem,itemID,view_xview[0]+x_pos+2+10,view_yview[0]+y_pos+2+10);
        
        
    
        draw_set_color(c_white)
        //mouse effects
        if mouse_enter_rectangle(view_xview[0]+x_pos,view_yview[0]+y_pos,view_xview[0]+x_pos+20,view_yview[0]+y_pos+21)
        {
            if itemID&gt;0 //filled
            {            
                draw_sprite_ext(spr_INVitem,itemID,view_xview[0]+x_pos+2+10,view_yview[0]+y_pos+2+10,1.2,1.2,0,c_white,1);
                //Draw Information box at mouse when hovering on top of item in inventory
                
                //Import Item's ID
                //Import item's data from database using ID
                item_database(itemID);
                
                //Find longest string and return in character amount (value)
                var longest;
                longest=max(string_length(itemname),string_length(itemtype),string_length("Level Required: "+string(itemlevel)),string_length(iteminfo))
    
                draw_set_alpha(0.5);
                draw_rectangle(mouse_x-2-4*longest,mouse_y-72,mouse_x+2+4*longest,mouse_y-23+1*string_height(itemname),0);
                draw_set_color(c_black);
                draw_set_alpha(0.7)
                draw_rectangle(mouse_x-4*longest,mouse_y-70,mouse_x+4*longest,mouse_y-25+1*string_height(itemname),0);
                draw_set_color(c_white)
                draw_set_alpha(1)
                draw_set_halign(fa_center)
                draw_text(mouse_x,mouse_y-70,string(itemname))
                draw_text(mouse_x,mouse_y-60,"Type: "+string(itemtype))
                draw_text(mouse_x,mouse_y-50,"Level Required: "+string(itemlevel))
                draw_line(mouse_x+4-4*longest,mouse_y-37,mouse_x-4+4*longest,mouse_y-37)
                draw_text(mouse_x,mouse_y-31,iteminfo)
                
                //if right clicked to unequip:
                if mouse_check_button_pressed(mb_right)
                {
                    equip_armor(itemID,0,object_index);
                }
                
            }
            else
            {
                draw_set_color(c_black)
                draw_set_alpha(0.7)
                draw_roundrect(mouse_x-3-0.5*string_width(string(name)+string(" slot: not filled")),mouse_y-10,mouse_x+3+0.5*string_width(string(name)+string(" slot: not filled")),mouse_y,0);
                draw_set_halign(fa_center)
                draw_set_alpha(1)
                draw_set_color(c_white)
                draw_text(mouse_x,mouse_y-11,string(name)+string(" slot: not filled"));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
