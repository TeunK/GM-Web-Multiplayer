<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tdPlayerA0Horizontal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keep Player in main view
if !instance_exists(obj_tdPlayerStalker)
{instance_create(x,y,obj_tdPlayerStalker)}
if !instance_exists(obj_tdPlayerShadow)
{instance_create(x,y,obj_tdPlayerShadow)}

username = obj_Controller.username
name = username

xxx=-1;
yyy=-1;

if obj_Clock.hour &lt;= 18 &amp;&amp; obj_Clock.hour &gt;=4
{light="off"} else {light="on"}

//set movement credentials
td_direction='neutral';
td_lastdirection='neutral';


//set NPC credentials
td_cantalkwith='neutral';

//----------------------------\\
//LOAD STATS FROM OBJ_CONTROLLER
//----------------------------\\

//set initials to avoid code collisions (gets reset by obj_Menuinfo)
tdmovespeed=0;
hitting=0;

//block ability to attack (eg when talking with npc)
canhit=1;

//Set Neutral Movement sprite
if td_direction != 'neutral'
{image_speed=0.5}
else
{image_speed=0}

//JUMPING INITIALS
jump=0;
inair=0;
jumpcount=20;
yy=y
jumpy=(y-60)
goup=0
godown=0
up=0
down=0
height=y-60
lowth=y

dir=0;

//Linking data from controller to tdPlayer
attackspeed=obj_Controller.attackspeed
attackrange=obj_Controller.attackrange
learnchain1=obj_Controller.learnchain1

//Damage
ownstrength=obj_Controller.ownstrength
weapondamage=obj_Controller.weapondamage

//Main attack
//atktimemax=30*(1.1^(-1*attackspeed));
atktimemax=round(30*power(1.1,-attackspeed))
atktime=atktimemax
chain1=1
cooldown=0;




//BUFFS
buff1=0 // Windwalk         [Movement]

buff2=0 // Rage Outfall     [Damage]

buff3=0 // Invoke Energy    [Heal]

buff4=0 // Adamantium Skin  [Defence]

buff5=0 // 

buff6=0 //
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement Scripts
scr_TopDownMovement();
scr_TopDownJump();

//Skills Scripts
scr_TopDownSkillBuffs();

//Map Scripts
scr_MapBorder();

//Regular NPC Interaction
scr_IntGeneral();
scr_IntRoomTutorial1();
scr_IntRoomTown1();

//Quests:
scr_Quest1();
scr_Quest2();
scr_Quest3();
scr_Quest4();

//Attack script
scr_tdPlayeratk();

//Set Neutral Movement sprite
if td_direction != 'neutral' &amp;&amp; jump=0
{
image_speed=0.5
}
else
{image_speed=0}

//Clock aka daytime data
if obj_Clock.hour &lt;= 18 &amp;&amp; obj_Clock.hour &gt;=6
{light="off"} else {light="on"}

//Linking data from controller to tdPlayer
attackspeed=obj_Controller.attackspeed
attackrange=obj_Controller.attackrange
learnchain1=obj_Controller.learnchain1

if global.ComeFromTutorial=1 &amp;&amp; room=room_Town1
{
x=obj_NPCgrampsTown1.x-global.xx;
y=obj_NPCgrampsTown1.y-global.yy;
global.ComeFromTutorial=2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//store x and y position
//global.xx=x
//global.yy=room_height-yprevious
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw light around player when dark
if light="on"
{
draw_light_circle(obj_tdPlayer.x,obj_tdPlayer.y,70,c_white,0.01,obj_tdPlayer.x,obj_tdPlayer.y,180,c_white,0.02,10);
}


/***************************************************
  ################# Draw Player ####################
 ***************************************************/
 
var up, scewup, horizontal, scewdown, down;
if obj_Controller.armor_top=0
{
    up=spr_tdPlayerA0VerticalUp;
    scewup=spr_tdPlayerA0ScewUp;
    horizontal=spr_tdPlayerA0Horizontal;
    scewdown=spr_tdPlayerA0ScewDown;
    down=spr_tdPlayerA0VerticalDown; 
}
else if obj_Controller.armor_top=1
{
    up=spr_tdPlayerA1VerticalUp;
    scewup=spr_tdPlayerA1ScewUp;
    horizontal=spr_tdPlayerA1Horizontal;
    scewdown=spr_tdPlayerA1ScewDown;
    down=spr_tdPlayerA1VerticalDown; 
}
else if obj_Controller.armor_top=2
{
    up=spr_tdPlayerA2VerticalUp;
    scewup=spr_tdPlayerA2ScewUp;
    horizontal=spr_tdPlayerA2Horizontal;
    scewdown=spr_tdPlayerA2ScewDown;
    down=spr_tdPlayerA2VerticalDown; 
}
else if obj_Controller.armor_top=3
{
    up=spr_tdPlayerA3VerticalUp;
    scewup=spr_tdPlayerA3ScewUp;
    horizontal=spr_tdPlayerA3Horizontal;
    scewdown=spr_tdPlayerA3ScewDown;
    down=spr_tdPlayerA3VerticalDown; 
}
else if obj_Controller.armor_top=4
{
    up=spr_tdPlayerA4VerticalUp;
    scewup=spr_tdPlayerA4ScewUp;
    horizontal=spr_tdPlayerA4Horizontal;
    scewdown=spr_tdPlayerA4ScewDown;
    down=spr_tdPlayerA4VerticalDown; 
}
else if obj_Controller.armor_top=5
{
    up=spr_tdPlayerA5VerticalUp;
    scewup=spr_tdPlayerA5ScewUp;
    horizontal=spr_tdPlayerA5Horizontal;
    scewdown=spr_tdPlayerA5ScewDown;
    down=spr_tdPlayerA5VerticalDown; 
}
else if obj_Controller.armor_top=6
{
    up=spr_tdPlayerA6VerticalUp;
    scewup=spr_tdPlayerA6ScewUp;
    horizontal=spr_tdPlayerA6Horizontal;
    scewdown=spr_tdPlayerA6ScewDown;
    down=spr_tdPlayerA6VerticalDown; 
}
else
{
    up=spr_tdPlayerA0VerticalUp;
    scewup=spr_tdPlayerA0ScewUp;
    horizontal=spr_tdPlayerA0Horizontal;
    scewdown=spr_tdPlayerA0ScewDown;
    down=spr_tdPlayerA0VerticalDown; 
}

 
//Movement Neutral
if td_direction != 'right'
&amp;&amp; td_direction != 'left' 
&amp;&amp; td_direction != 'right-up' 
&amp;&amp; td_direction != 'right-down' 
&amp;&amp; td_direction != 'left-up' 
&amp;&amp; td_direction != 'left-down' 
&amp;&amp; td_direction != 'up'
&amp;&amp; td_direction != 'down'
&amp;&amp; td_lastdirection = 'neutral'
{draw_sprite(down,image_index,x,y); td_direction='neutral'};

//Movement up
if td_direction='up' || (td_lastdirection='up' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(up,image_index,x,y,1,1,0,c_white,1);td_lastdirection='up'}

//Movement scew right up
if td_direction='right-up' || (td_lastdirection='right-up' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(scewup,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right-up'};

//Movement right
if td_direction='right' || (td_lastdirection='right' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(horizontal,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right'};

//Movement scew right down
if td_direction='right-down' || (td_lastdirection='right-down' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(scewdown,image_index,x,y,1,1,0,c_white,1);td_lastdirection='right-down'};

//Movement down
if td_direction='down' || (td_lastdirection='down' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(down,image_index,x,y,1,1,0,c_white,1);td_lastdirection='down'}

//Movement scew left down
if td_direction='left-down' || (td_lastdirection='left-down' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(scewdown,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left-down'};

//Movement Left
if td_direction='left' || (td_lastdirection='left' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(horizontal,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left'};

//Movement scew left up
if td_direction='left-up' || (td_lastdirection='left-up' &amp;&amp; td_direction='neutral')
{draw_sprite_ext(scewup,image_index,x,y,-1,1,0,c_white,1);td_lastdirection='left-up'};



/*
argument0    x1: x position of circle 1
argument1    y1: y poistion of circle 1
argument2    r1: radius of circle 1
argument3    c1: color of circle 1
argument4    a1: transparency of circle1. Between 0 and 1
argument5    x2: x position of circle 2
argument6    y2: y position of circle 2
argument7    r2: radius of circle 2
argument8    c2: color of circle 2
argument9    a2: transparency of circle 2. Between 0 and 1
argument10   quantity: the number of circles the light is composed of
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.7);
draw_set_color(c_black);

//draw_rectangle(x+obj_Controller.attackrange*cos(degtorad(dir-45)),y+obj_Controller.attackrange*-sin(degtorad(dir-45)),x+obj_Controller.attackrange*cos(degtorad(dir+45)),y+obj_Controller.attackrange*-sin(degtorad(dir+45)),0)

/*draw_line(x,y,x+obj_Controller.attackrange*cos(degtorad(dir-90)),y+obj_Controller.attackrange*-sin(degtorad(dir-90)));
draw_line(x,y,x+obj_Controller.attackrange*cos(degtorad(dir-45)),y+obj_Controller.attackrange*-sin(degtorad(dir-45)));
draw_line(x,y,x+obj_Controller.attackrange*cos(degtorad(dir+00)),y+obj_Controller.attackrange*-sin(degtorad(dir+00)));
draw_line(x,y,x+obj_Controller.attackrange*cos(degtorad(dir+45)),y+obj_Controller.attackrange*-sin(degtorad(dir+45)));
draw_line(x,y,x+obj_Controller.attackrange*cos(degtorad(dir+90)),y+obj_Controller.attackrange*-sin(degtorad(dir+90)));

/*
(x &lt; obj_tdPlayer.x+obj_Controller.attackrange*cos(degtorad(obj_tdPlayer.dir-90)) || x &lt; obj_tdPlayer.x+obj_Controller.attackrange*cos(degtorad(obj_tdPlayer.dir+90))) &amp;&amp;
(x &lt; obj_tdPlayer.x || x &gt; obj_tdPlayer.x) &amp;&amp;
(y &gt; obj_tdPlayer.y+obj_Controller.attackrange*sin(degtorad(obj_tdPlayer.dir-90)) || y &gt; obj_tdPlayer.y+obj_Controller.attackrange*sin(degtorad(obj_tdPlayer.dir+90))) &amp;&amp;
(y &lt; obj_tdPlayer.y || y &gt; obj_tdPlayer.y)

draw_text(obj_tdPlayer.x+obj_Controller.attackrange*cos(degtorad(obj_tdPlayer.dir-90)),
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
//draw arrows thowards doors
if instance_exists(obj_RoomProgress)
{
    if distance_to_object(obj_RoomProgress) &lt;= 300
    {
        draw_arrow(x+(obj_RoomProgress.x-x),y+(obj_RoomProgress.y-y),x+(obj_RoomProgress.x-x)+tan(obj_RoomProgress.x/x),y+(obj_RoomProgress.y-y)+tan(obj_RoomProgress.y/y),20);
    }
}

if instance_exists(obj_downRoomNext)
{
    if distance_to_object(obj_downRoomNext) &lt;= 300
    {
        draw_arrow(x+(obj_downRoomNext.x-x),y+(obj_downRoomNext.y-y),x+(obj_downRoomNext.x-x)+tan(obj_downRoomNext.x/x),y+(obj_downRoomNext.y-y)+tan(obj_downRoomNext.y/y),20);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
