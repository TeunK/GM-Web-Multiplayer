<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected=1; //skill selected
sprwidth=448;   //width of the sprite
sprheight=27;   //height of the sprite

for (n=0; n&lt;7; n+=1)
{
    skillactivate[n]=0
}

for (i=0; i&lt;7; i+=1)
{
skillcdmax[i]=90;
skillcd[i]=90;
}


skills=ds_list_create();
for (i=0; i&lt;7; i+=1)
{
    ds_list_add(skills,0)
}

select=-1;

meleehover=-1;

skip=-1;
timeout=0;

Groundshock=0
Groundaftershock=0
Groundaftershocknumber=0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_Controller.typing != 1
{
    if keyboard_check_pressed(ord('I')) {selected+=1;skip=0}
    if keyboard_check_pressed(ord('U')) {selected-=1;skip=1}
}

if selected&lt;1 {selected=7}
if selected&gt;7 {selected=1}

if (skip &gt; -1)
{
    timeout +=1;
}
if timeout &gt;=7 {timeout=0;skip=-1;selected=1;}

scr_SkillList();

//if !(ds_list_find_value(skills,i) == 0)
if skip=0 //forward
{
    if selected &gt;= 1 &amp;&amp; selected &lt; 7
    {
        if (ds_list_find_value(skills,selected-1) == 0) {selected+=1;} else {skip=-1}
    }
    else if selected &gt;= 7
    {
        if (ds_list_find_value(skills,selected-1) == 0) {selected=1;} else {skip=-1}
    }
}

if skip=1 //backward
{   
    if selected &lt;= 7 &amp;&amp; selected &gt; 1
    {
        if (ds_list_find_value(skills,selected-1) == 0) {selected-=1;} else {skip=-1}
    }
    else if selected &lt;= 1
    {
        if (ds_list_find_value(skills,selected-1) == 0) {selected=7;} else {skip=-1}
    }
}
//if (ds_list_find_value(skills,selected) != 0) {test=1}




var num_skillcd;
num_skillcd=0;

for (i=0; i&lt;7; i+=1)
{
    if skillactivate[i]=1
    {num_skillcd+=1}
}

/***************************************************
                //SKILL COOLDOWNS
 ***************************************************/
/*for (i=0; i&lt;7; i+=1)
{
    if skillactivate[i] = 1
    {
        if ds_list_find_value(skills,selected-1) == i
        {
            skillcdmax[i]=meleecooldown[i];
            skillcd[i]=meleecooldown[i];
        }
    }
}
 

/***************************************************
                //SKILL INITIATION
 ***************************************************/
 if obj_Controller.typing != 1
{
    if keyboard_check_pressed(ord('H')) 
    {
        if skillactivate[selected-1]=0 
        {
            if ds_list_find_value(skills,selected-1) != 0 
            {
                if skillactivate[selected-1] == 0   //slot is not on cooldown
                {
                
                
                    //IMPALE
                    if ds_list_find_value(skills,selected-1) == 1
                    {
                        if obj_Controller.ownsp &gt;= meleecost[1]
                        {
                            instance_create(obj_tdPlayer.x,obj_tdPlayer.y,obj_ActionImpale);
                            skillactivate[selected-1]=1
                            obj_Controller.ownsp -= meleecost[1]
                            skillcdmax[1]=meleecooldown[1];
                            skillcd[1]=meleecooldown[1];
                        }
                        else
                        {
                            saypc("Insufficient stamina for this skill.",c_orange);
                        }
                    }
                    
                    
                    
                    //GROUND SHOCK
                    if ds_list_find_value(skills,selected-1) == 2
                    {
                        if obj_Controller.ownsp &gt;= meleecost[2]
                        {
                            //Initiate Jumping script
                            obj_tdPlayer.up=1
                            obj_tdPlayer.gravity_direction=270
                            obj_tdPlayer.vspeed=-15
                            obj_tdPlayer.jump=1
                            if obj_tdPlayer.DepthTarget.y &lt;= obj_tdPlayer.lowth {obj_tdPlayer.depth=-5}
                            if obj_tdPlayer.DepthTarget.y &gt; obj_tdPlayer.lowth {obj_tdPlayer.depth=2}
                            obj_Controller.ownsp -= meleecost[2]
                            //skillcdmax[2]=meleecooldown[2];
                            //skillcd[2]=meleecooldown[2];
                            skillcdmax[1]=300;
                            skillcd[1]=300
        
                            Groundshock=1
                            skillactivate[selected-1]=1
                        }
                        else
                        {
                            saypc("Insufficient stamina for this skill.",c_orange)
                        }
                    } 
                    
                    //Energy Blast
                    if ds_list_find_value(skills,selected-1) == 3
                    {
                        if obj_Controller.ownsp &gt;= meleecost[3]
                        {
                            instance_create(obj_tdPlayer.x,obj_tdPlayer.y,obj_ActionEnergyBlast);
                            skillactivate[selected-1]=1
                            obj_Controller.ownsp -= meleecost[3]
                            skillcdmax[3]=meleecooldown[3];
                            skillcd[3]=meleecooldown[3];
                        }
                        else
                        {
                            saypc("Insufficient stamina for this skill.",c_orange)
                        }
                    }    
                }
                else
                {
                    saypc("Skill has not yet cooled down.",c_orange)
                }
                
                
                //else
                //if statement for other skill
                //{skillactivate[selected-1]=1;}
            }
            
        }
    }
}

for (i=0; i&lt;7; i+=1)
{
    if skillactivate[i]=1 {skillcd[i]-=1; }
    if skillcd[i]&lt;=0 {skillcd[i]=skillcdmax[i];skillactivate[i]=0 }
}

if Groundshock=1
{
    if obj_tdPlayer.jump=0
    {
        global.shakescreen=5;
        instance_create(obj_tdPlayer.x,obj_tdPlayer.y,obj_ActionGroundshock);
        Groundshock=0
        Groundaftershock=1
    }
}

if Groundaftershock=1
{
    Groundaftershocknumber+=1
    if Groundaftershocknumber=5 || Groundaftershocknumber=10 || Groundaftershocknumber=15 || Groundaftershocknumber=20
    {
        instance_create(x,y,obj_ActionGroundshockdud);
    }
    if Groundaftershocknumber &gt;=20
    {
        Groundaftershock=0;
        Groundaftershocknumber=0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; i&lt;7; i+=1)
    {
        if mouse_x &gt; view_xview[0]+402+((1/7)*448)*(i) &amp;&amp;
            mouse_x &lt; view_xview[0]+402+(1/7*448)*(i+1)/*+(1/7*448)*/ &amp;&amp;
            mouse_y &gt; view_yview[0]+552 &amp;&amp;
            mouse_y &lt; view_yview[0]+552+27
            {
                if ds_list_find_value(skills,i) != -1
                {
                    meleehover=ds_list_find_value(skills,i);
                }
                //slot[i]=ds_list_find_value(skills,i);
            }
    }
    
if 
    !(
    mouse_x &gt; view_xview[0]+402 &amp;&amp;
    mouse_x &lt; view_xview[0]+402+(1/7*448)*(7)/*+(1/7*448)*/ &amp;&amp;
    mouse_y &gt; view_yview[0]+552 &amp;&amp;
    mouse_y &lt; view_yview[0]+552+27)
    {
        meleehover=-1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite(sprite_index,image_index,x,y);
draw_set_alpha(0.7)
draw_set_color(make_color_rgb(244,208,88))
draw_rectangle(view_xview[0]+402+((1/7)*sprwidth)*(selected-1),view_yview[0]+552,view_xview[0]+402+(1/7*sprwidth)*(selected-1)+(1/7*sprwidth),view_yview[0]+552+sprheight,1)

var num_skillcd;
num_skillcd=0;

for (i=0; i&lt;7; i+=1)
{
    if skillactivate[i]=1
    {num_skillcd+=1}
}

draw_set_color(c_black)

for (i=0; i&lt;7; i+=1)
{
    if ds_list_find_value(skills,i) != 0
    {
        draw_sprite_ext(spr_MeleeSkills,ds_list_find_value(skills,i)-1,view_xview[0]+402+((1/7)*sprwidth)*i,view_yview[0]+552,1,1,0,c_white,1)
    }
}

for (i=0; i&lt;7; i+=1)
{
//draw_healthbar(x+((1/7)*sprwidth)*(selected-1),y,x+(1/7*sprwidth)*(selected-1)+(1/7*sprwidth),y+sprheight,100/skillcdmax*skillcd,c_black,c_lime,c_red,0,1,0)
//draw_healthbar(x1,y1,x2,y2,amount,backcol,mincol,maxcol,direction,showback,showborder)
draw_set_alpha(0.3)
if (100/skillcdmax[i]*skillcd[i]) != 100 {
    draw_healthbar(view_xview[0]+402+2+((1/7)*sprwidth)*i,view_yview[0]+552+2,view_xview[0]+402-2+(1/7*sprwidth)*i+(1/7*sprwidth),view_yview[0]+552-2+sprheight,100/skillcdmax[i]*skillcd[i],c_black,c_lime,c_red,0,1,1)
    }
}

if instance_exists(obj_SkillIcon)
{
    for (i=0; i&lt;7; i+=1)
    {
        if mouse_x &gt; view_xview[0]+402+((1/7)*448)*(i) &amp;&amp;
            mouse_x &lt; view_xview[0]+402+(1/7*448)*(i+1)/*+(1/7*448)*/ &amp;&amp;
            mouse_y &gt; view_yview[0]+552 &amp;&amp;
            mouse_y &lt; view_yview[0]+552+27
            {
                draw_set_color(c_green);
                draw_set_alpha(1);
                draw_rectangle(view_xview[0]+402+((1/7)*448)*(i),view_yview[0]+552,view_xview[0]+402+(1/7*448)*(i)+(1/7*448),view_yview[0]+552+27,1);
                draw_set_alpha(0.3);
                draw_rectangle(view_xview[0]+402+((1/7)*448)*(i),view_yview[0]+552,view_xview[0]+402+(1/7*448)*(i)+(1/7*448),view_yview[0]+552+27,0);
                
                if mouse_check_button_released(mb_left)
                {
                    scr_AddSkill(obj_SkillsBG.page,i+1);
                    with (obj_SkillIcon) {instance_destroy()}
                    
                }
            }
    }
}



//draw skill info if hovering on top
scr_SkillList();
draw_set_halign(fa_left);
draw_set_font(ft_NPC);
if (meleehover &gt;0)
{
    draw_set_color(c_black);
    draw_set_alpha(0.6);
    draw_rectangle(view_xview[0]+700,view_yview[0]+480,view_xview[0]+1000,view_yview[0]+538,0);
    draw_set_color(c_white);
    draw_rectangle(view_xview[0]+700,view_yview[0]+480,view_xview[0]+1000,view_yview[0]+538,1);
    draw_set_color(c_orange);
    //Skill Name
    draw_text(view_xview[0]+710,view_yview[0]+480,string(meleename[meleehover])+string(" Lv")+string(meleelevel[meleehover]));
    draw_set_color(c_white);
    //Skill Effects
    draw_text(view_xview[0]+710,view_yview[0]+490,string(meleeeffect[meleehover]));
    draw_text(view_xview[0]+710,view_yview[0]+500,string("Damage: ") +string(meleedamage[meleehover]));
    draw_text(view_xview[0]+710,view_yview[0]+510,string("Cooldown Time: ")+string(meleecooldown[meleehover]/30)+string(" seconds"));
    draw_text(view_xview[0]+710,view_yview[0]+520,string("Skill Range: ")+string(meleerange[meleehover])+string("m"));
    draw_set_halign(fa_right);
    if obj_Controller.ownsp&gt;=meleecost[meleehover] {draw_set_color(c_lime)} else {draw_set_color(c_red)};
    draw_text(view_xview[0]+980,view_yview[0]+520,string("Skill Cost: ")+string(meleecost[meleehover])+string(" sp"));
}

//draw square around skill when on top
for (i=0; i&lt;7; i+=1)
{
    if mouse_x &gt; view_xview[0]+402+((1/7)*448)*(i) &amp;&amp;
        mouse_x &lt; view_xview[0]+402+(1/7*448)*(i+1)/*+(1/7*448)*/ &amp;&amp;
        mouse_y &gt; view_yview[0]+552 &amp;&amp;
        mouse_y &lt; view_yview[0]+552+27
        {
            draw_set_color(c_green);
            draw_set_alpha(1);
            draw_rectangle(view_xview[0]+402+((1/7)*448)*(i),view_yview[0]+552,view_xview[0]+402+(1/7*448)*(i)+(1/7*448),view_yview[0]+552+27,1);
            draw_set_color(c_white);
            draw_set_alpha(0.2);
            draw_rectangle(view_xview[0]+402+((1/7)*448)*(i),view_yview[0]+552,view_xview[0]+402+(1/7*448)*(i)+(1/7*448),view_yview[0]+552+27,0);
            
            if !(ds_list_find_value(skills,i) == 0) 
            {
                if mouse_check_button_pressed(mb_left)
                {
                    obj_SkillsBG.page=ds_list_find_value(skills,i);
                    obj_SkillsBG.drag=1;
                    //this=instance_create(mouse_x,mouse_y,obj_SkillIcon);
                    //this.image_index=ds_list_find_value(skills,i)
                    ds_list_replace(skills,i,0);
                }
            }
        }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
