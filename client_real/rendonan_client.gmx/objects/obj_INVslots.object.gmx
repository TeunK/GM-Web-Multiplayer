<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10001</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
getinventory=0            //obj_Logout asks for inventory data when storing to database
selected = -1;            //which slot is selected
draw_selected = 0;        //selected (previous) slot
drag = false;             //if dragging an item
num_item=0;               //total items in inventory (occupied slot count)

pickup_item=false;        //item pickup script
item=0;                   //item
quantity=0;               //quantity of picked up item

sort=false                //arrange the inventory


//load inventory content from controller
inv=ds_list_create();
if instance_exists(obj_Controller)
{
    ds_list_add(inv,obj_Controller.saveitem0);
    ds_list_add(inv,obj_Controller.saveitem1);        
    ds_list_add(inv,obj_Controller.saveitem2);        
    ds_list_add(inv,obj_Controller.saveitem3);               
    ds_list_add(inv,obj_Controller.saveitem4);               
    ds_list_add(inv,obj_Controller.saveitem5);            
    ds_list_add(inv,obj_Controller.saveitem6);                
    ds_list_add(inv,obj_Controller.saveitem7);                 
    ds_list_add(inv,obj_Controller.saveitem8);              
    ds_list_add(inv,obj_Controller.saveitem9);               
    ds_list_add(inv,obj_Controller.saveitem10);               
    ds_list_add(inv,obj_Controller.saveitem11);               
    ds_list_add(inv,obj_Controller.saveitem12);               
    ds_list_add(inv,obj_Controller.saveitem13);               
    ds_list_add(inv,obj_Controller.saveitem14);               
    ds_list_add(inv,obj_Controller.saveitem15);              
    ds_list_add(inv,obj_Controller.saveitem16);               
    ds_list_add(inv,obj_Controller.saveitem17);                
    ds_list_add(inv,obj_Controller.saveitem18);                    
    ds_list_add(inv,obj_Controller.saveitem19);             
    ds_list_add(inv,obj_Controller.saveitem20);               
    ds_list_add(inv,obj_Controller.saveitem21);                
    ds_list_add(inv,obj_Controller.saveitem22);            
    ds_list_add(inv,obj_Controller.saveitem23);             
    ds_list_add(inv,obj_Controller.saveitem24);              
    ds_list_add(inv,obj_Controller.saveitem25);               
    ds_list_add(inv,obj_Controller.saveitem26);               
    ds_list_add(inv,obj_Controller.saveitem27);            
    ds_list_add(inv,obj_Controller.saveitem28);             
    ds_list_add(inv,obj_Controller.saveitem29);                
    ds_list_add(inv,obj_Controller.saveitem30);                
    ds_list_add(inv,obj_Controller.saveitem31);                 
    ds_list_add(inv,obj_Controller.saveitem32);                
    ds_list_add(inv,obj_Controller.saveitem33);            
    ds_list_add(inv,obj_Controller.saveitem34);               
    ds_list_add(inv,obj_Controller.saveitem35);             
    ds_list_add(inv,obj_Controller.saveitem36);                 
    ds_list_add(inv,obj_Controller.saveitem37);               
    ds_list_add(inv,obj_Controller.saveitem38);                   
    ds_list_add(inv,obj_Controller.saveitem39);                
    ds_list_add(inv,obj_Controller.saveitem40);            
    ds_list_add(inv,obj_Controller.saveitem41);               
    ds_list_add(inv,obj_Controller.saveitem42);                
    ds_list_add(inv,obj_Controller.saveitem43);            
    ds_list_add(inv,obj_Controller.saveitem44);            
    ds_list_add(inv,obj_Controller.saveitem45);              
    ds_list_add(inv,obj_Controller.saveitem46);              
    ds_list_add(inv,obj_Controller.saveitem47);              
    ds_list_add(inv,obj_Controller.saveitem48);                  
    ds_list_add(inv,obj_Controller.saveitem49);                 
    ds_list_add(inv,obj_Controller.saveitem50);                 
    ds_list_add(inv,obj_Controller.saveitem51);                
    ds_list_add(inv,obj_Controller.saveitem52);             
    ds_list_add(inv,obj_Controller.saveitem53);             
    ds_list_add(inv,obj_Controller.saveitem54);                
    ds_list_add(inv,obj_Controller.saveitem55);                
    ds_list_add(inv,obj_Controller.saveitem56);            
    ds_list_add(inv,obj_Controller.saveitem57);            
    ds_list_add(inv,obj_Controller.saveitem58);                
    ds_list_add(inv,obj_Controller.saveitem59);                  
    ds_list_add(inv,obj_Controller.saveitem60);                   
    ds_list_add(inv,obj_Controller.saveitem61);                 
    ds_list_add(inv,obj_Controller.saveitem62);                   
    ds_list_add(inv,obj_Controller.saveitem63);        
    ds_list_add(inv,obj_Controller.saveitem64);            
    ds_list_add(inv,obj_Controller.saveitem65);                 
    ds_list_add(inv,obj_Controller.saveitem66);               
    ds_list_add(inv,obj_Controller.saveitem67);                
    ds_list_add(inv,obj_Controller.saveitem68);             
    ds_list_add(inv,obj_Controller.saveitem69);               
    ds_list_add(inv,obj_Controller.saveitem70);                
    ds_list_add(inv,obj_Controller.saveitem71);                  
    ds_list_add(inv,obj_Controller.saveitem72);            
    ds_list_add(inv,obj_Controller.saveitem73);        
    ds_list_add(inv,obj_Controller.saveitem74);          
    ds_list_add(inv,obj_Controller.saveitem75);            
    ds_list_add(inv,obj_Controller.saveitem76);            
    ds_list_add(inv,obj_Controller.saveitem77);           
    ds_list_add(inv,obj_Controller.saveitem78);            
    ds_list_add(inv,obj_Controller.saveitem79); 
    /*
    for (i=0; i&lt;80; i+=1)
    {
        ds_list_add(inv,40+i);
    }*/
}
            
invQ=ds_map_create();
for (i=0; i&lt;150; i+=1)                                                               //i&lt; total amount of different items, link quantity to item id
{
    ds_map_add(invQ,i,0)
}

// itemQ[i]=ds_map_find_value(invQ,itemID[i])

if instance_exists(obj_Controller)
{
    //Last fix; quantity now responds to the itemID. itemID responds to the slot.
    //eg ITEM ID on slot 2 is 10; then quantity will be found by looking for the key 10.
    ds_map_replace(invQ,0,obj_Controller.saveqitem0); 
    ds_map_replace(invQ,1,obj_Controller.saveqitem1); 
    ds_map_replace(invQ,2,obj_Controller.saveqitem2); 
    ds_map_replace(invQ,3,obj_Controller.saveqitem3); 
    ds_map_replace(invQ,4,obj_Controller.saveqitem4); 
    ds_map_replace(invQ,5,obj_Controller.saveqitem5); 
    ds_map_replace(invQ,6,obj_Controller.saveqitem6); 
    ds_map_replace(invQ,7,obj_Controller.saveqitem7); 
    ds_map_replace(invQ,8,obj_Controller.saveqitem8); 
    ds_map_replace(invQ,9,obj_Controller.saveqitem9); 
    ds_map_replace(invQ,10,obj_Controller.saveqitem10); 
    ds_map_replace(invQ,11,obj_Controller.saveqitem11); 
    ds_map_replace(invQ,12,obj_Controller.saveqitem12); 
    ds_map_replace(invQ,13,obj_Controller.saveqitem13); 
    ds_map_replace(invQ,14,obj_Controller.saveqitem14); 
    ds_map_replace(invQ,15,obj_Controller.saveqitem15); 
    ds_map_replace(invQ,16,obj_Controller.saveqitem16); 
    ds_map_replace(invQ,17,obj_Controller.saveqitem17); 
    ds_map_replace(invQ,18,obj_Controller.saveqitem18); 
    ds_map_replace(invQ,19,obj_Controller.saveqitem19); 
    ds_map_replace(invQ,20,obj_Controller.saveqitem20); 
    ds_map_replace(invQ,21,obj_Controller.saveqitem21); 
    ds_map_replace(invQ,22,obj_Controller.saveqitem22); 
    ds_map_replace(invQ,23,obj_Controller.saveqitem23); 
    ds_map_replace(invQ,24,obj_Controller.saveqitem24); 
    ds_map_replace(invQ,25,obj_Controller.saveqitem25); 
    ds_map_replace(invQ,26,obj_Controller.saveqitem26); 
    ds_map_replace(invQ,27,obj_Controller.saveqitem27); 
    ds_map_replace(invQ,28,obj_Controller.saveqitem28); 
    ds_map_replace(invQ,29,obj_Controller.saveqitem29); 
    ds_map_replace(invQ,30,obj_Controller.saveqitem30); 
    ds_map_replace(invQ,31,obj_Controller.saveqitem31); 
    ds_map_replace(invQ,32,obj_Controller.saveqitem32); 
    ds_map_replace(invQ,33,obj_Controller.saveqitem33); 
    ds_map_replace(invQ,34,obj_Controller.saveqitem34); 
    ds_map_replace(invQ,35,obj_Controller.saveqitem35); 
    ds_map_replace(invQ,36,obj_Controller.saveqitem36); 
    ds_map_replace(invQ,37,obj_Controller.saveqitem37); 
    ds_map_replace(invQ,38,obj_Controller.saveqitem38); 
    ds_map_replace(invQ,39,obj_Controller.saveqitem39); 
    ds_map_replace(invQ,40,obj_Controller.saveqitem40); 
    ds_map_replace(invQ,41,obj_Controller.saveqitem41); 
    ds_map_replace(invQ,42,obj_Controller.saveqitem42); 
    ds_map_replace(invQ,43,obj_Controller.saveqitem43); 
    ds_map_replace(invQ,44,obj_Controller.saveqitem44); 
    ds_map_replace(invQ,45,obj_Controller.saveqitem45); 
    ds_map_replace(invQ,46,obj_Controller.saveqitem46); 
    ds_map_replace(invQ,47,obj_Controller.saveqitem47); 
    ds_map_replace(invQ,48,obj_Controller.saveqitem48); 
    ds_map_replace(invQ,49,obj_Controller.saveqitem49); 
    ds_map_replace(invQ,50,obj_Controller.saveqitem50); 
    ds_map_replace(invQ,51,obj_Controller.saveqitem51); 
    ds_map_replace(invQ,52,obj_Controller.saveqitem52); 
    ds_map_replace(invQ,53,obj_Controller.saveqitem53); 
    ds_map_replace(invQ,54,obj_Controller.saveqitem54); 
    ds_map_replace(invQ,55,obj_Controller.saveqitem55); 
    ds_map_replace(invQ,56,obj_Controller.saveqitem56); 
    ds_map_replace(invQ,57,obj_Controller.saveqitem57); 
    ds_map_replace(invQ,58,obj_Controller.saveqitem58); 
    ds_map_replace(invQ,59,obj_Controller.saveqitem59); 
    ds_map_replace(invQ,60,obj_Controller.saveqitem60); 
    ds_map_replace(invQ,61,obj_Controller.saveqitem61); 
    ds_map_replace(invQ,62,obj_Controller.saveqitem62); 
    ds_map_replace(invQ,63,obj_Controller.saveqitem63); 
    ds_map_replace(invQ,64,obj_Controller.saveqitem64); 
    ds_map_replace(invQ,65,obj_Controller.saveqitem65); 
    ds_map_replace(invQ,66,obj_Controller.saveqitem66); 
    ds_map_replace(invQ,67,obj_Controller.saveqitem67); 
    ds_map_replace(invQ,68,obj_Controller.saveqitem68); 
    ds_map_replace(invQ,69,obj_Controller.saveqitem69); 
    ds_map_replace(invQ,70,obj_Controller.saveqitem70); 
    ds_map_replace(invQ,71,obj_Controller.saveqitem71); 
    ds_map_replace(invQ,72,obj_Controller.saveqitem72); 
    ds_map_replace(invQ,73,obj_Controller.saveqitem73); 
    ds_map_replace(invQ,74,obj_Controller.saveqitem74); 
    ds_map_replace(invQ,75,obj_Controller.saveqitem75); 
    ds_map_replace(invQ,76,obj_Controller.saveqitem76); 
    ds_map_replace(invQ,77,obj_Controller.saveqitem77); 
    ds_map_replace(invQ,78,obj_Controller.saveqitem78); 
    ds_map_replace(invQ,79,obj_Controller.saveqitem79);
    ds_map_replace(invQ,80,obj_Controller.saveqitem80); 
    ds_map_replace(invQ,81,obj_Controller.saveqitem81); 
    ds_map_replace(invQ,82,obj_Controller.saveqitem82); 
    ds_map_replace(invQ,83,obj_Controller.saveqitem83); 
    ds_map_replace(invQ,84,obj_Controller.saveqitem84); 
    ds_map_replace(invQ,85,obj_Controller.saveqitem85); 
    ds_map_replace(invQ,86,obj_Controller.saveqitem86); 
    ds_map_replace(invQ,87,obj_Controller.saveqitem87); 
    ds_map_replace(invQ,88,obj_Controller.saveqitem88); 
    ds_map_replace(invQ,89,obj_Controller.saveqitem89); 
    ds_map_replace(invQ,90,obj_Controller.saveqitem90); 
    ds_map_replace(invQ,91,obj_Controller.saveqitem91); 
    ds_map_replace(invQ,92,obj_Controller.saveqitem92); 
    ds_map_replace(invQ,93,obj_Controller.saveqitem93); 
    ds_map_replace(invQ,94,obj_Controller.saveqitem94); 
    ds_map_replace(invQ,95,obj_Controller.saveqitem95); 
    ds_map_replace(invQ,96,obj_Controller.saveqitem96); 
    ds_map_replace(invQ,97,obj_Controller.saveqitem97); 
    ds_map_replace(invQ,98,obj_Controller.saveqitem98); 
    ds_map_replace(invQ,99,obj_Controller.saveqitem99);
    ds_map_replace(invQ,100,obj_Controller.saveqitem100); 
    ds_map_replace(invQ,101,obj_Controller.saveqitem101); 
    ds_map_replace(invQ,102,obj_Controller.saveqitem102); 
    ds_map_replace(invQ,103,obj_Controller.saveqitem103); 
    ds_map_replace(invQ,104,obj_Controller.saveqitem104); 
    ds_map_replace(invQ,105,obj_Controller.saveqitem105); 
    ds_map_replace(invQ,106,obj_Controller.saveqitem106); 
    ds_map_replace(invQ,107,obj_Controller.saveqitem107); 
    ds_map_replace(invQ,108,obj_Controller.saveqitem108); 
    ds_map_replace(invQ,109,obj_Controller.saveqitem109); 
    ds_map_replace(invQ,110,obj_Controller.saveqitem110); 
    ds_map_replace(invQ,111,obj_Controller.saveqitem111); 
    ds_map_replace(invQ,112,obj_Controller.saveqitem112); 
    ds_map_replace(invQ,113,obj_Controller.saveqitem113); 
    ds_map_replace(invQ,114,obj_Controller.saveqitem114); 
    ds_map_replace(invQ,115,obj_Controller.saveqitem115); 
    ds_map_replace(invQ,116,obj_Controller.saveqitem116); 
    ds_map_replace(invQ,117,obj_Controller.saveqitem117); 
    ds_map_replace(invQ,118,obj_Controller.saveqitem118); 
    ds_map_replace(invQ,119,obj_Controller.saveqitem119); 
    ds_map_replace(invQ,120,obj_Controller.saveqitem120); 
    ds_map_replace(invQ,121,obj_Controller.saveqitem121); 
    ds_map_replace(invQ,122,obj_Controller.saveqitem122); 
    ds_map_replace(invQ,123,obj_Controller.saveqitem123); 
    ds_map_replace(invQ,124,obj_Controller.saveqitem124); 
    ds_map_replace(invQ,125,obj_Controller.saveqitem125); 
    ds_map_replace(invQ,126,obj_Controller.saveqitem126); 
    ds_map_replace(invQ,127,obj_Controller.saveqitem127); 
    ds_map_replace(invQ,128,obj_Controller.saveqitem128); 
    ds_map_replace(invQ,129,obj_Controller.saveqitem129); 
    ds_map_replace(invQ,130,obj_Controller.saveqitem130); 
    ds_map_replace(invQ,131,obj_Controller.saveqitem131); 
    ds_map_replace(invQ,132,obj_Controller.saveqitem132); 
    ds_map_replace(invQ,133,obj_Controller.saveqitem133); 
    ds_map_replace(invQ,134,obj_Controller.saveqitem134); 
    ds_map_replace(invQ,135,obj_Controller.saveqitem135); 
    ds_map_replace(invQ,136,obj_Controller.saveqitem136); 
    ds_map_replace(invQ,137,obj_Controller.saveqitem137); 
    ds_map_replace(invQ,138,obj_Controller.saveqitem138); 
    ds_map_replace(invQ,139,obj_Controller.saveqitem139); 
    ds_map_replace(invQ,140,obj_Controller.saveqitem140); 
    ds_map_replace(invQ,141,obj_Controller.saveqitem141); 
    ds_map_replace(invQ,142,obj_Controller.saveqitem142); 
    ds_map_replace(invQ,143,obj_Controller.saveqitem143); 
    ds_map_replace(invQ,144,obj_Controller.saveqitem144); 
    ds_map_replace(invQ,145,obj_Controller.saveqitem145); 
    ds_map_replace(invQ,146,obj_Controller.saveqitem146); 
    ds_map_replace(invQ,147,obj_Controller.saveqitem147); 
    ds_map_replace(invQ,148,obj_Controller.saveqitem148); 
    ds_map_replace(invQ,149,obj_Controller.saveqitem149);   
    //ds_map_replace(invQ,2),1234);
    /*
    for (i=0; i&lt;150; i+=1)
    {
        ds_map_replace(invQ,i,i); //&lt;-- defines quantity for itemID. key=id, value=quantity
    }
    */
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
getinventory=0            //obj_Logout asks for inventory data when storing to database
selected = -1;            //which slot is selected
draw_selected = 0;        //selected (previous) slot
drag = false;             //if dragging an item
num_item=0;               //total items in inventory (occupied slot count)

pickup_item=false;        //item pickup script
item=0;                   //item
quantity=0;               //quantity of picked up item

sort=false                //arrange the inventory


//load inventory content from controller
inv=ds_list_create();
if instance_exists(obj_Controller)
{
    ds_list_add(inv,obj_Controller.saveitem0);
    ds_list_add(inv,obj_Controller.saveitem1);        
    ds_list_add(inv,obj_Controller.saveitem2);        
    ds_list_add(inv,obj_Controller.saveitem3);               
    ds_list_add(inv,obj_Controller.saveitem4);               
    ds_list_add(inv,obj_Controller.saveitem5);            
    ds_list_add(inv,obj_Controller.saveitem6);                
    ds_list_add(inv,obj_Controller.saveitem7);                 
    ds_list_add(inv,obj_Controller.saveitem8);              
    ds_list_add(inv,obj_Controller.saveitem9);               
    ds_list_add(inv,obj_Controller.saveitem10);               
    ds_list_add(inv,obj_Controller.saveitem11);               
    ds_list_add(inv,obj_Controller.saveitem12);               
    ds_list_add(inv,obj_Controller.saveitem13);               
    ds_list_add(inv,obj_Controller.saveitem14);               
    ds_list_add(inv,obj_Controller.saveitem15);              
    ds_list_add(inv,obj_Controller.saveitem16);               
    ds_list_add(inv,obj_Controller.saveitem17);                
    ds_list_add(inv,obj_Controller.saveitem18);                    
    ds_list_add(inv,obj_Controller.saveitem19);             
    ds_list_add(inv,obj_Controller.saveitem20);               
    ds_list_add(inv,obj_Controller.saveitem21);                
    ds_list_add(inv,obj_Controller.saveitem22);            
    ds_list_add(inv,obj_Controller.saveitem23);             
    ds_list_add(inv,obj_Controller.saveitem24);              
    ds_list_add(inv,obj_Controller.saveitem25);               
    ds_list_add(inv,obj_Controller.saveitem26);               
    ds_list_add(inv,obj_Controller.saveitem27);            
    ds_list_add(inv,obj_Controller.saveitem28);             
    ds_list_add(inv,obj_Controller.saveitem29);                
    ds_list_add(inv,obj_Controller.saveitem30);                
    ds_list_add(inv,obj_Controller.saveitem31);                 
    ds_list_add(inv,obj_Controller.saveitem32);                
    ds_list_add(inv,obj_Controller.saveitem33);            
    ds_list_add(inv,obj_Controller.saveitem34);               
    ds_list_add(inv,obj_Controller.saveitem35);             
    ds_list_add(inv,obj_Controller.saveitem36);                 
    ds_list_add(inv,obj_Controller.saveitem37);               
    ds_list_add(inv,obj_Controller.saveitem38);                   
    ds_list_add(inv,obj_Controller.saveitem39);                
    ds_list_add(inv,obj_Controller.saveitem40);            
    ds_list_add(inv,obj_Controller.saveitem41);               
    ds_list_add(inv,obj_Controller.saveitem42);                
    ds_list_add(inv,obj_Controller.saveitem43);            
    ds_list_add(inv,obj_Controller.saveitem44);            
    ds_list_add(inv,obj_Controller.saveitem45);              
    ds_list_add(inv,obj_Controller.saveitem46);              
    ds_list_add(inv,obj_Controller.saveitem47);              
    ds_list_add(inv,obj_Controller.saveitem48);                  
    ds_list_add(inv,obj_Controller.saveitem49);                 
    ds_list_add(inv,obj_Controller.saveitem50);                 
    ds_list_add(inv,obj_Controller.saveitem51);                
    ds_list_add(inv,obj_Controller.saveitem52);             
    ds_list_add(inv,obj_Controller.saveitem53);             
    ds_list_add(inv,obj_Controller.saveitem54);                
    ds_list_add(inv,obj_Controller.saveitem55);                
    ds_list_add(inv,obj_Controller.saveitem56);            
    ds_list_add(inv,obj_Controller.saveitem57);            
    ds_list_add(inv,obj_Controller.saveitem58);                
    ds_list_add(inv,obj_Controller.saveitem59);                  
    ds_list_add(inv,obj_Controller.saveitem60);                   
    ds_list_add(inv,obj_Controller.saveitem61);                 
    ds_list_add(inv,obj_Controller.saveitem62);                   
    ds_list_add(inv,obj_Controller.saveitem63);        
    ds_list_add(inv,obj_Controller.saveitem64);            
    ds_list_add(inv,obj_Controller.saveitem65);                 
    ds_list_add(inv,obj_Controller.saveitem66);               
    ds_list_add(inv,obj_Controller.saveitem67);                
    ds_list_add(inv,obj_Controller.saveitem68);             
    ds_list_add(inv,obj_Controller.saveitem69);               
    ds_list_add(inv,obj_Controller.saveitem70);                
    ds_list_add(inv,obj_Controller.saveitem71);                  
    ds_list_add(inv,obj_Controller.saveitem72);            
    ds_list_add(inv,obj_Controller.saveitem73);        
    ds_list_add(inv,obj_Controller.saveitem74);          
    ds_list_add(inv,obj_Controller.saveitem75);            
    ds_list_add(inv,obj_Controller.saveitem76);            
    ds_list_add(inv,obj_Controller.saveitem77);           
    ds_list_add(inv,obj_Controller.saveitem78);            
    ds_list_add(inv,obj_Controller.saveitem79);        
}
            
invQ=ds_map_create();
for (i=0; i&lt;80; i+=1)//i&lt; total amount of different items, link quantity to item id
{
    ds_map_add(invQ,i,0)
}

// itemQ[i]=ds_map_find_value(invQ,itemID[i])

if instance_exists(obj_Controller)
{
    ds_map_replace(invQ,ds_list_find_value(inv,0),obj_Controller.saveqitem0); 
    ds_map_replace(invQ,ds_list_find_value(inv,1),obj_Controller.saveqitem1); 
    ds_map_replace(invQ,ds_list_find_value(inv,2),obj_Controller.saveqitem2); 
    ds_map_replace(invQ,ds_list_find_value(inv,3),obj_Controller.saveqitem3); 
    ds_map_replace(invQ,ds_list_find_value(inv,4),obj_Controller.saveqitem4); 
    ds_map_replace(invQ,ds_list_find_value(inv,5),obj_Controller.saveqitem5); 
    ds_map_replace(invQ,ds_list_find_value(inv,6),obj_Controller.saveqitem6); 
    ds_map_replace(invQ,ds_list_find_value(inv,7),obj_Controller.saveqitem7); 
    ds_map_replace(invQ,ds_list_find_value(inv,8),obj_Controller.saveqitem8); 
    ds_map_replace(invQ,ds_list_find_value(inv,9),obj_Controller.saveqitem9); 
    ds_map_replace(invQ,ds_list_find_value(inv,10),obj_Controller.saveqitem10); 
    ds_map_replace(invQ,ds_list_find_value(inv,11),obj_Controller.saveqitem11); 
    ds_map_replace(invQ,ds_list_find_value(inv,12),obj_Controller.saveqitem12); 
    ds_map_replace(invQ,ds_list_find_value(inv,13),obj_Controller.saveqitem13); 
    ds_map_replace(invQ,ds_list_find_value(inv,14),obj_Controller.saveqitem14); 
    ds_map_replace(invQ,ds_list_find_value(inv,15),obj_Controller.saveqitem15); 
    ds_map_replace(invQ,ds_list_find_value(inv,16),obj_Controller.saveqitem16); 
    ds_map_replace(invQ,ds_list_find_value(inv,17),obj_Controller.saveqitem17); 
    ds_map_replace(invQ,ds_list_find_value(inv,18),obj_Controller.saveqitem18); 
    ds_map_replace(invQ,ds_list_find_value(inv,19),obj_Controller.saveqitem19); 
    ds_map_replace(invQ,ds_list_find_value(inv,20),obj_Controller.saveqitem20); 
    ds_map_replace(invQ,ds_list_find_value(inv,21),obj_Controller.saveqitem21); 
    ds_map_replace(invQ,ds_list_find_value(inv,22),obj_Controller.saveqitem22); 
    ds_map_replace(invQ,ds_list_find_value(inv,23),obj_Controller.saveqitem23); 
    ds_map_replace(invQ,ds_list_find_value(inv,24),obj_Controller.saveqitem24); 
    ds_map_replace(invQ,ds_list_find_value(inv,25),obj_Controller.saveqitem25); 
    ds_map_replace(invQ,ds_list_find_value(inv,26),obj_Controller.saveqitem26); 
    ds_map_replace(invQ,ds_list_find_value(inv,27),obj_Controller.saveqitem27); 
    ds_map_replace(invQ,ds_list_find_value(inv,28),obj_Controller.saveqitem28); 
    ds_map_replace(invQ,ds_list_find_value(inv,29),obj_Controller.saveqitem29); 
    ds_map_replace(invQ,ds_list_find_value(inv,30),obj_Controller.saveqitem30); 
    ds_map_replace(invQ,ds_list_find_value(inv,31),obj_Controller.saveqitem31); 
    ds_map_replace(invQ,ds_list_find_value(inv,32),obj_Controller.saveqitem32); 
    ds_map_replace(invQ,ds_list_find_value(inv,33),obj_Controller.saveqitem33); 
    ds_map_replace(invQ,ds_list_find_value(inv,34),obj_Controller.saveqitem34); 
    ds_map_replace(invQ,ds_list_find_value(inv,35),obj_Controller.saveqitem35); 
    ds_map_replace(invQ,ds_list_find_value(inv,36),obj_Controller.saveqitem36); 
    ds_map_replace(invQ,ds_list_find_value(inv,37),obj_Controller.saveqitem37); 
    ds_map_replace(invQ,ds_list_find_value(inv,38),obj_Controller.saveqitem38); 
    ds_map_replace(invQ,ds_list_find_value(inv,39),obj_Controller.saveqitem39); 
    ds_map_replace(invQ,ds_list_find_value(inv,40),obj_Controller.saveqitem40); 
    ds_map_replace(invQ,ds_list_find_value(inv,41),obj_Controller.saveqitem41); 
    ds_map_replace(invQ,ds_list_find_value(inv,42),obj_Controller.saveqitem42); 
    ds_map_replace(invQ,ds_list_find_value(inv,43),obj_Controller.saveqitem43); 
    ds_map_replace(invQ,ds_list_find_value(inv,44),obj_Controller.saveqitem44); 
    ds_map_replace(invQ,ds_list_find_value(inv,45),obj_Controller.saveqitem45); 
    ds_map_replace(invQ,ds_list_find_value(inv,46),obj_Controller.saveqitem46); 
    ds_map_replace(invQ,ds_list_find_value(inv,47),obj_Controller.saveqitem47); 
    ds_map_replace(invQ,ds_list_find_value(inv,48),obj_Controller.saveqitem48); 
    ds_map_replace(invQ,ds_list_find_value(inv,49),obj_Controller.saveqitem49); 
    ds_map_replace(invQ,ds_list_find_value(inv,50),obj_Controller.saveqitem50); 
    ds_map_replace(invQ,ds_list_find_value(inv,51),obj_Controller.saveqitem51); 
    ds_map_replace(invQ,ds_list_find_value(inv,52),obj_Controller.saveqitem52); 
    ds_map_replace(invQ,ds_list_find_value(inv,53),obj_Controller.saveqitem53); 
    ds_map_replace(invQ,ds_list_find_value(inv,54),obj_Controller.saveqitem54); 
    ds_map_replace(invQ,ds_list_find_value(inv,55),obj_Controller.saveqitem55); 
    ds_map_replace(invQ,ds_list_find_value(inv,56),obj_Controller.saveqitem56); 
    ds_map_replace(invQ,ds_list_find_value(inv,57),obj_Controller.saveqitem57); 
    ds_map_replace(invQ,ds_list_find_value(inv,58),obj_Controller.saveqitem58); 
    ds_map_replace(invQ,ds_list_find_value(inv,59),obj_Controller.saveqitem59); 
    ds_map_replace(invQ,ds_list_find_value(inv,60),obj_Controller.saveqitem60); 
    ds_map_replace(invQ,ds_list_find_value(inv,61),obj_Controller.saveqitem61); 
    ds_map_replace(invQ,ds_list_find_value(inv,62),obj_Controller.saveqitem62); 
    ds_map_replace(invQ,ds_list_find_value(inv,63),obj_Controller.saveqitem63); 
    ds_map_replace(invQ,ds_list_find_value(inv,64),obj_Controller.saveqitem64); 
    ds_map_replace(invQ,ds_list_find_value(inv,65),obj_Controller.saveqitem65); 
    ds_map_replace(invQ,ds_list_find_value(inv,66),obj_Controller.saveqitem66); 
    ds_map_replace(invQ,ds_list_find_value(inv,67),obj_Controller.saveqitem67); 
    ds_map_replace(invQ,ds_list_find_value(inv,68),obj_Controller.saveqitem68); 
    ds_map_replace(invQ,ds_list_find_value(inv,69),obj_Controller.saveqitem69); 
    ds_map_replace(invQ,ds_list_find_value(inv,70),obj_Controller.saveqitem70); 
    ds_map_replace(invQ,ds_list_find_value(inv,71),obj_Controller.saveqitem71); 
    ds_map_replace(invQ,ds_list_find_value(inv,72),obj_Controller.saveqitem72); 
    ds_map_replace(invQ,ds_list_find_value(inv,73),obj_Controller.saveqitem73); 
    ds_map_replace(invQ,ds_list_find_value(inv,74),obj_Controller.saveqitem74); 
    ds_map_replace(invQ,ds_list_find_value(inv,75),obj_Controller.saveqitem75); 
    ds_map_replace(invQ,ds_list_find_value(inv,76),obj_Controller.saveqitem76); 
    ds_map_replace(invQ,ds_list_find_value(inv,77),obj_Controller.saveqitem77); 
    ds_map_replace(invQ,ds_list_find_value(inv,78),obj_Controller.saveqitem78); 
    ds_map_replace(invQ,ds_list_find_value(inv,79),obj_Controller.saveqitem79); 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=view_xview[0]+743;
y=view_yview[0]+89;



if (pickup_item)
{
 item_pickup(item,quantity)
 pickup_item=false;
 item=0;
}

if (sort) 
{
    //ARRANGE START                      
    //Start sorting, ignore 0
    var empty, i;
    empty = 0;
    
    ds_list_sort(inv, 1);
    
    
    for (i = 0; i &lt; ds_list_size(inv); i += 1)
    {
        if (ds_list_find_value(inv, i) == 0) 
        {empty += 1} else break;
    }
    
    repeat (empty){
        ds_list_delete(inv, 0);
        ds_list_add(inv, 0);
    }
    sort=false;
}

for (i=0; i&lt;ds_list_size(inv); i+=1)
{
    itemID[i]=ds_list_find_value(inv,i)
    itemQ[i]=ds_map_find_value(invQ,itemID[i])
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/***************************************************

  ########### Action Rightclick Script #############
  
 ***************************************************/

if instance_exists(obj_InventoryBG)
{
    if obj_InventoryBG.down=1
    { 
        for (i=0; i&lt;10; i+=1)
        {
            for (ii=0; ii&lt;8; ii+=1)
            {
                if //mouse enters an occupied slot
                (mouse_x &gt; view_xview[0]+743-16+(32*ii) &amp;&amp; 
                 mouse_x &lt; view_xview[0]+775-16+(32*ii) &amp;&amp; 
                  mouse_y &gt; view_yview[0]+89-16+(32*i) &amp;&amp; 
                   mouse_y &lt; view_yview[0]+121-16+(32*i))
                    {
                        if itemID[i*8+ii] !=0 
                        {
                            //right clicked, then activate item
                            if mouse_check_button_pressed(mb_right)
                            {
                                if (itemID[i*8+ii] &gt;1 &amp;&amp; itemID[i*8+ii] &lt; 20)
                                {
                                    item_effects();
                                    
                                        
                                    //if the quantity is more than 1
                                    if itemQ[i*8+ii] &gt; 1
                                    {
                                       //decrease quantity by 1
                                       ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                    }
                                    
                                    //if quantity equals 1
                                    else if itemQ[i*8+ii] == 1
                                    {
                                        //erase item from slot and set quantity to 0
                                        ds_list_replace(inv,i*8+ii,0)
                                        ds_map_replace(invQ,itemID[i*8+ii],0)
                                    }
                                }
                                else if (itemID[i*8+ii] &gt;= 20 &amp;&amp; itemID[i*8+ii] &lt; 150)
                                {
                                    
    
                                    //if string_pos("Equipment",item_info(itemID[i*8+ii],itemtype)) &gt;= 1
                                    //{
                                        var equipment;
                                        equipment=itemID[i*8+ii];
                                        //TOP
                                        if (item_info(equipment,itemtype) == "Upper Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Top.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Top)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a top",c_orange)
                                                saypc("Please un-equip that first.",c_orange)
                                            }
                                        }
                                        
                                        //Head
                                        else if (item_info(equipment,itemtype) == "Head Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Head.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Head)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a helmet",c_orange)
                                                saypc("Please un-equip that first.",c_orange)
                                            }
                                        }
                                        
                                        //Shoulders
                                        else if (item_info(equipment,itemtype) == "Shoulder Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Shoulders.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Shoulders)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing shoulder guards",c_orange)
                                                saypc("Please un-equip those first.",c_orange)
                                            }
                                        }
                                        
                                        //Hand
                                        else if (item_info(equipment,itemtype) == "Hand Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Gloves.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Gloves)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing gauntlets",c_orange)
                                                saypc("Please un-equip those first.",c_orange)
                                            }
                                        }
                                        
                                        //Arm
                                        else if (item_info(equipment,itemtype) == "Arm Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Vambraces.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Vambraces)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing vambraces",c_orange)
                                                saypc("Please un-equip those first.",c_orange)
                                            }
                                        }
                                        
                                        //Leg
                                        else if (item_info(equipment,itemtype) == "Leg Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Legs.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Legs)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a leggings",c_orange)
                                                saypc("Please un-equip those first.",c_orange)
                                            }
                                        }
                                        
                                        //Foot
                                        else if (item_info(equipment,itemtype) == "Foot Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Boots.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Boots)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing shoes",c_orange)
                                                saypc("Please un-equip those first.",c_orange)
                                            }
                                        }
                                        
                                        //Ear
                                        else if (item_info(equipment,itemtype) == "Ear Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Earring.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Earring)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing earrings",c_orange)
                                                saypc("Please un-equip those first.",c_orange)
                                            }
                                        }
                                        
                                        //Ring 1
                                        else if (item_info(equipment,itemtype) == "Finger 1 Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Ring1.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Ring1)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a ring",c_orange)
                                                saypc("Please un-equip that first.",c_orange)
                                            }
                                        }
                                        
                                        //Ring 2
                                        else if (item_info(equipment,itemtype) == "Finger 2 Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Ring2.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Ring2)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a ring",c_orange)
                                                saypc("Please un-equip that first.",c_orange)
                                            }
                                        }
                                        
                                        //Ring 3
                                        else if (item_info(equipment,itemtype) == "Finger 3 Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Ring3.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Ring3)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a ring",c_orange)
                                                saypc("Please un-equip that first.",c_orange)
                                            }
                                        }
                                        
                                        //Ring 4
                                        else if (item_info(equipment,itemtype) == "Finger 4 Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Ring4.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Ring4)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a ring",c_orange)
                                                saypc("Please un-equip that first.",c_orange)
                                            }
                                        }
                                        
                                        //Weapon (Right Hand)
                                        else if (item_info(equipment,itemtype) == "Right Hand Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Weapon.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Weapon)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already holding a weapon",c_orange)
                                                saypc("Please un-equip that one first.",c_orange)
                                            }
                                        }
                                        
                                        //Shield (Left Hand)
                                        else if (item_info(equipment,itemtype) == "Left Hand Equipment" &amp;&amp; item_info(equipment,itemlevel) &lt;= obj_Controller.ownlevel)
                                        {
                                            if s_Shield.itemID == 0
                                            {
                                                equip_armor(equipment,1,s_Shield)
                                                
                                                //if the quantity is more than 1
                                                if itemQ[i*8+ii] &gt; 1
                                                {
                                                   //decrease quantity by 1
                                                   ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]-1)
                                                }
                                                
                                                //if quantity equals 1
                                                else if itemQ[i*8+ii] == 1
                                                {
                                                    //erase item from slot and set quantity to 0
                                                    ds_list_replace(inv,i*8+ii,0)
                                                    ds_map_replace(invQ,itemID[i*8+ii],0)
                                                }
                                            }
                                            else
                                            {
                                                saypc("Already wearing a shield",c_orange)
                                                saypc("Please un-equip that one first.",c_orange)
                                            }
                                        }
                                        else if (item_info(equipment,itemlevel) &gt; obj_Controller.ownlevel)
                                        {
                                            saypc("Your level is too low to equip this.");
                                        }
                                    
                                        
                                        
                                    //}
                     
                                    
                                }
                                
                            }
                        }

                    }
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if keyboard_check_pressed(vk_enter)
{
    ds_map_replace(invQ,ds_list_find_value(inv,1),100);
}

//obj_INVslots.ds_list_find_value(inv,1)
//obj_INVslots.ds_map_find_value(invQ,obj_INVslots.ds_list_find_value(inv,1))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_InventoryBG)
{
    if obj_InventoryBG.up=0
    {

        if (drag){
        for (i=0; i&lt;10; i+=1)
        {
            for (ii=0; ii&lt;8; ii+=1)
            { 
                if //mouse enters a slot
                (mouse_x &gt; view_xview[0]+743-16+(32*ii) &amp;&amp; 
                 mouse_x &lt; view_xview[0]+775-16+(32*ii) &amp;&amp; 
                  mouse_y &gt; view_yview[0]+89-16+(32*i) &amp;&amp; 
                   mouse_y &lt; view_yview[0]+121-16+(32*i))
                   {
                   
                        itemID[i*8+ii]=ds_list_find_value(inv,i*8+ii)
                        itemQ[i*8+ii]=ds_map_find_value(invQ,itemID[i*8+ii])
                    
                        
                        var a, aa, itemid;                           
                        //Store selected item
                        a = ds_list_find_value(inv,i*8+ii)
                        aa = ds_map_find_value(invQ,a)
                        itemid = a
                        item_database();
                        
                        
                        //test if selected and released slots are identical
                        if i*8+ii != selected 
                        {
                            //test if new and old item are identical
                            if itemID[i*8+ii] = itemID[selected]
                            {
                                ds_map_replace(invQ,itemID[i*8+ii],itemQ[i*8+ii]+itemQ[selected])
                                ds_list_replace(inv,selected,0)
                            }
                            //If new and old items are not identical
                            else if itemID[i*8+ii] != itemID[selected]
                            {
                                ds_list_replace(inv,i*8+ii,itemID[selected]) 
                                ds_list_replace(inv,selected,a)
                            }
                        }
                    }
                }
            }
        }
        
        for (i=0; i&lt;80; i+=1)
        {
            itemID[i]=ds_list_find_value(inv,i)
            itemQ[i]=ds_map_find_value(invQ,itemID[i])
        }
        
        //(mouse_x &lt; x || mouse_x &gt; x+128 || mouse_y &lt; y || mouse_y &gt; y+182) 
        //
        // If mouse in the field while item from inventory selected and released, drop item in map on cursor location
        //
        if ((mouse_x &lt; view_xview[0]+680) &amp;&amp; mouse_y &lt; view_yview[0]+540 &amp;&amp; drag=true)
        {
            create=instance_create(mouse_x,mouse_y,obj_Items);
            create.itemid=itemID[selected]
            create.quantity=itemQ[selected]
            create.falling=1;
            create.fall=5+random(10);;
            //itemID[selected]=0
            ds_map_replace(invQ,itemID[selected],0)
            //itemID[selected]=0                  //variable_local_set("slot["+string(selected)+"]", 0);
            ds_list_replace(inv,selected,0);
        }
        
        drag = false;
        selected = -1;

    }
}




/*
x Left  :             view_xview[0]+743+(32*b)
y Top   :             view_yview[0]+89+(32*i)

x Right :             view_xview[0]+775+(32*b)
y Bottom:             view_yview[0]+121+(32*i)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_InventoryBG)
{
    if obj_InventoryBG.up=0
    {
        for (i=0; i&lt;10; i+=1)
        {
            for (ii=0; ii&lt;8; ii+=1)
            {
                if //mouse enters a slot
                (mouse_x &gt; view_xview[0]+743-16+(32*ii) &amp;&amp; 
                  mouse_x &lt; view_xview[0]+775-16+(32*ii) &amp;&amp; 
                   mouse_y &gt; view_yview[0]+89-16+(32*i) &amp;&amp; 
                    mouse_y &lt; view_yview[0]+121-16+(32*i))
                        {    //test each slot[] space for being pressed
                             selected = i*8+ii;   //set selected to pressed slot[] number
                             draw_selected = 0;  //Restart animation when clicked on for drag
                             //add Dragging
                             if (itemID[i*8+ii] != 0) //Drags only when clicked on slot that contains item
                             {
                              drag = true;
                             }
                        }
            }
        }
    }
}



/*
x Left  :             view_xview[0]+743+(32*b)
y Top   :             view_yview[0]+89+(32*i)

x Right :             view_xview[0]+775+(32*b)
y Bottom:             view_yview[0]+121+(32*i)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_InventoryBG)
{
    if obj_InventoryBG.down=1
    {
    
        //count total occupied slots amount
        var num_item;
        num_item = 0;

        for (i=0; i&lt;ds_list_size(inv); i+=1)
        {
            if itemID[i] != 0
            {
                num_item += 1;
            }
        }
        
        for (i=0; i&lt;ds_list_size(inv); i+=1) 
        {
            itemID[i]=ds_list_find_value(inv,i)
            itemQ[i]=ds_map_find_value(invQ,itemID[i])
        }

        
        //Draw Additional bar UNDER inventory
        draw_set_alpha(1);
        draw_set_color(c_white);
        draw_rectangle(view_xview[0]+718,view_yview[0]+399,view_xview[0]+990,view_yview[0]+453,0);
        draw_set_color(c_black);
        draw_rectangle(view_xview[0]+719,view_yview[0]+400,view_xview[0]+989,view_yview[0]+452,0);
        draw_set_color(c_white);
        draw_line(view_xview[0]+724,view_yview[0]+432,view_xview[0]+984,view_yview[0]+432);
        draw_sprite(spr_INVitem,1,view_xview[0]+719+16,view_yview[0]+400+16);
        draw_rectangle(view_xview[0]+719+32,view_yview[0]+408,view_xview[0]+850,view_yview[0]+424,1);
        draw_set_font(ft_menu3);
        draw_set_halign(fa_left);
        draw_text(view_xview[0]+722+32,view_yview[0]+410,obj_Controller.money);
        
        //Set color for item count text (white when dragging, green when not full, red when full)
        if (drag)               {draw_set_color(c_white)} 
        else if (num_item &lt; ds_list_size(inv)) {draw_set_color(c_lime)}
        else                    {draw_set_color(c_red)}
        //return (num_item) in text info;    
        draw_text(view_xview[0]+722,view_yview[0]+437,string("Slots used: ")+string(num_item)+string(" / 80 [")+string(ds_list_size(inv)-num_item)+string("]"));    //draw item amount
    
            
        /***************************************************
          ############## Inventory Arrange ###############
         ***************************************************/
         
        //Draw Inventory-arrange button

        if //mouse enters an occupied slot
        (mouse_x &gt; view_xview[0]+875 &amp;&amp; 
         mouse_x &lt; view_xview[0]+875+90 &amp;&amp; 
          mouse_y &gt; view_yview[0]+408 &amp;&amp; 
           mouse_y &lt; view_yview[0]+408+16)
           {
                   //if pressed
                   if mouse_check_button_pressed(mb_left)
                   {
                        draw_sprite_ext(spr_INVarrange,0,view_xview[0]+875,view_yview[0]+410,0.9,0.9,0,c_white,1)
                        //ARRANGE START
                        //Create data structure
                        sort=true;
                   }
                   else
                   {
                        draw_sprite(spr_INVarrange,0,view_xview[0]+875,view_yview[0]+410)
                   }
           }
           else //mouse outside button
           {
                   draw_sprite(spr_INVarrange,0,view_xview[0]+875,view_yview[0]+408)
                   
           }
        
    
        
        /***************************************************
          ############# Main Inventory system ##############
         ***************************************************/
        
        //draw slots and items
                        
        for (i=0; i&lt;ds_list_size(inv); i+=1)
        {
            itemID[i]=ds_list_find_value(inv,i)
            itemQ[i]=ds_map_find_value(invQ,itemID[i])
        }   

        
        for (i=0; i&lt;10; i+=1)
        {
            for (ii=0; ii&lt;8; ii+=1)
            {       
            
                draw_set_alpha(0.5);
                draw_sprite(spr_INVslot,0,view_xview[0]+743+(32*ii),view_yview[0]+89+(32*i));   // draw the slots
                draw_set_alpha(1);
                if (selected == i*8+ii)
                {
                    draw_selected += 0.3;
                    draw_sprite_ext(spr_INVitem,itemID[i*8+ii],view_xview[0]+743+(32*ii),view_yview[0]+89+(32*i),1,1,0,c_white,0.8+0.2*sin(draw_selected));
                    draw_set_color(c_white);
                    draw_set_alpha(0.1+0.3*sin(draw_selected));
                    //draw blinking white rectangle when selected
                    draw_rectangle(view_xview[0]+743-16+(32*ii),view_yview[0]+89-16+(32*i),view_xview[0]+743+13+(32*ii),view_yview[0]+89+13+(32*i),true);
                    draw_set_alpha(1);
                }
                    else
                {
                    //Draw item in inventory
                    
                    draw_sprite(spr_INVitem,itemID[i*8+ii],view_xview[0]+743+(32*ii),view_yview[0]+89+(32*i));
                    draw_set_color(c_white)
                    draw_set_font(ft_menu5)
                    draw_set_halign(fa_center);
                    //Draw Quantity
                    if (itemID[i*8+ii] != 0)
                    {
                        draw_set_color(c_black)
                        draw_set_alpha(0.8)
                        draw_rectangle(view_xview[0]+750-2+(32*ii),view_yview[0]+94+(32*i),view_xview[0]+750+10+(32*ii),view_yview[0]+90+13+(32*i),0);
                        draw_set_alpha(1);
                        draw_set_color(c_white)
                        draw_rectangle(view_xview[0]+750-2+(32*ii),view_yview[0]+94+(32*i),view_xview[0]+750+10+(32*ii),view_yview[0]+90+13+(32*i),1);
                        draw_text(view_xview[0]+754+(32*ii),view_yview[0]+93+(32*i),itemQ[i*8+ii])
                    }            
                }
            }
        }
        
        
        
        //When hovering on item, show items details
        for (i=0; i&lt;10; i+=1)
        {
            for (ii=0; ii&lt;8; ii+=1)
            {
                if //mouse enters an occupied slot
                (mouse_x &gt; view_xview[0]+743-16+(32*ii) &amp;&amp; 
                 mouse_x &lt; view_xview[0]+775-16+(32*ii) &amp;&amp; 
                  mouse_y &gt; view_yview[0]+89-16+(32*i) &amp;&amp; 
                   mouse_y &lt; view_yview[0]+121-16+(32*i) &amp;&amp;
                    itemID[i*8+ii] !=0 )
                    {
                        
                        draw_sprite_ext(spr_INVitem,itemID[i*8+ii],view_xview[0]+743+(32*ii),view_yview[0]+89+(32*i),1.2,1.2,0,c_white,1);
                        //Draw Information box at mouse when hovering on top of item in inventory
                        
                        //Import Item's ID
                        //Import item's data from database using ID
                        item_database(itemID[i*8+ii]);
                        
                        //Find longest string and return in character amount (value)
                        var longest, totalheight;                        
                    
                        longest=max(string_width(itemname), string_width(itemtype), string_width(itemlevel), string_width(iteminfo));
                        highest=max(string_height(itemname), string_height(itemtype), string_height(itemlevel), string_height(iteminfo));
                        
                        draw_sprite(spr_INVitem,variable_local_get("slot["+string(i*8+ii)+"]"),view_xview[0]+743+(32*ii),view_yview[0]+89+(32*i));
                        
                        //draw white background rectangle
                        draw_set_color(c_white);
                        draw_set_alpha(0.5);
                        draw_rectangle(mouse_x-longest-3,mouse_y-72,mouse_x+longest+3,mouse_y-23+highest,0)
                        
                        //draw foreground black rectangle
                        draw_set_color(c_black);
                        draw_set_alpha(0.7);
                        draw_rectangle(mouse_x-longest,mouse_y-70,mouse_x+longest,mouse_y-25+highest,0);
                        
                        //draw item info
                        draw_set_color(c_white);
                        draw_set_alpha(1);
                        draw_set_halign(fa_center);
                        draw_text(mouse_x,mouse_y-70,string(itemname)+string("  [ ")+string(ds_map_find_value(invQ,ds_list_find_value(inv,i*8+ii)))+string("x ]"))
                        draw_text(mouse_x,mouse_y-60,"Type: "+string(itemtype))
                        
                        if obj_Controller.ownlevel &gt;= itemlevel {draw_set_color(c_lime)} else {draw_set_color(c_red)}
                        draw_text(mouse_x,mouse_y-50,"Level Required: "+string(itemlevel))
                        
                        draw_set_color(c_white);
                        draw_line(mouse_x+4-longest,mouse_y-37,mouse_x-4+longest,mouse_y-37)
                        draw_text(mouse_x,mouse_y-31,iteminfo)
                    }
            }
        }
        
        if (drag)
        {
         draw_sprite_ext(spr_INVitem,itemID[selected],mouse_x,mouse_y,1,1,0,c_white,0.7);
        }

    }
}


/*
x Left  :             view_xview[0]+743+(32*b)
y Top   :             view_yview[0]+89+(32*i)

x Right :             view_xview[0]+775+(32*b)
y Bottom:             view_yview[0]+121+(32*i)
/*
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
