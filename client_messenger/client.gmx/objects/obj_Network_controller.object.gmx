<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_NetworkController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Our client ID as assigned by server
server_ip           = "127.0.0.1" //"82.39.79.35"; 
server_port         = 24000;
server_socket       = wn_connect(server_ip, server_port)
update_speed        = set_updates_per_second(30);



users = ds_map_create();
client_clock = 0;
connected = false;
client_id = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>client_clock += 1;

//track connected status
if (client_id == -1) connected = false else connected = true;

//create chatbox when connected
if (connected &amp;&amp; !instance_exists(obj_Chatbox)) instance_create(x,y,obj_Chatbox);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(wn_receive_message(server_socket))
{
    var msg_type=wn_msgtype("S2C",wn_read_byte());
    
    switch(msg_type)
    {
        case "confirm_client_id":
            //receive client_id from server
            client_id = wn_read_byte();
            
            //respond with our username
            wn_clear_buffer();
            wn_write_byte(wn_msgtype("C2S", "initial_client_details"));
            wn_write_string(obj_Controller.username);
            wn_send_message(server_socket)
            
            break;
            
        case "chat_message":
            //receive message from some user
            var sender          = wn_read_string();
            var chat_message    = wn_read_string();
            
            //add new message to chatbox
            obj_Chatbox.chat_contents = add_line(obj_Chatbox.chat_contents, sender, chat_message, c_white);
            
            break;
        
        case "ping":
            //receive ping time when client sent it to server
            var ping_starttime = wn_read_string();
            
            //store time (first shift each ping in history by 1)
            for (i=ping_history_limit-1; i&gt;=0; i-=1)
            {
                ping[i+1] = ping[i]
            }
            ping[0] = (string(get_timer()/1000) - ping_starttime)
            
            break;
            
        case "client_count":
            client_count = wn_read_byte();
                        
            break;
            
        case "request_count":
            request_count = wn_read_string();
            
            break;
            
        case "client_disconnected":
            //network variable
            var userid = wn_read_string();
            
            //ensure incoming update is not about self-user
            if (userid != client_id)
            {
                if (ds_map_find_value(users, userid))
                {
                    //user was already known
                    player_instance = ds_map_find_value(users, userid)
                    with (player_instance)
                    {
                        instance_destroy();
                    }
                    ds_map_delete(users,userid);
                }
            }
            else
            {
                game_end();
                show_message("Game should have ended for this player by now..");
            }
            
            break;
            
        case "update_user":
            //network variable
            var userid = wn_read_string();
            
            //ensure incoming update is not about self-user
            if (userid != client_id)
            {
                if (ds_map_find_value(users, userid))
                {
                    //user was already known
                    player_id = ds_map_find_value(users, userid)
                }
                else
                {
                    //new user appeared
                    player_id = instance_create(0,0,obj_DummyPlayer);
                    ds_map_add(users, userid, player_id);
                }
                
                //update user's values
                player_id.username  = wn_read_string();
                player_id.sprite_id = wn_read_string();
                player_id.x         = wn_read_string();
                player_id.y         = wn_read_string();
                player_id.h_speed   = wn_read_string();
                player_id.v_speed   = wn_read_string();
                player_id.td_direction= wn_read_string();
                player_id.roomname  = wn_read_string();
                player_id.armor_top = wn_read_string();
                player_id.level     = wn_read_string();
                                
            }
            else
            {
                wn_clear_buffer();
            }
            break;
    }
}

//update server with coordinates
if (connected &amp;&amp; client_clock mod update_speed == 0)
{
    if (instance_exists(obj_Player) &amp;&amp; instance_exists(obj_Controller))
    {
        wn_clear_buffer();
        
        //update message type
        wn_write_byte(wn_msgtype("C2S", "update_user"));

        //controller variable
        wn_write_string(obj_Controller.username);
        
        //player variables
        wn_write_string(obj_Player.sprite_id);
        wn_write_string(round(obj_Player.x));
        wn_write_string(round(obj_Player.y));
        wn_write_string(round(obj_Player.h_speed));
        wn_write_string(round(obj_Player.v_speed));
        wn_write_string(round(obj_Player.mouse_x));
        wn_write_string(round(obj_Player.mouse_y));
        wn_write_string(round(obj_Player.td_direction));
        wn_write_string(round(obj_Player.roomname));
        wn_write_string(round(obj_Player.armor_top));
        wn_write_string(round(obj_Player.level));
        
        
        //send
        wn_send_message(server_socket)   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//send disconnect-client msg
show_message("disconnect client");
wn_write_byte(wn_msgtype("C2S", "client_disconnects"));
wn_send_message(server_socket)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw server status (top-right)
draw_set_color(c_black);
draw_set_halign(fa_right);
draw_set_valign(fa_middle);
if (!connected)
{
    var msg = "Attempting to establish connection to server.. ("+string(round(client_clock / room_speed))+")"
    draw_set_color(c_black)
    draw_rectangle(room_width-20+4,20-0.5*string_height(msg),room_width-4-28-string_width(msg),20+0.5*string_height(msg),0)
    draw_set_color(c_white)
    draw_text(room_width-28, 20, msg)
    draw_sprite(spr_button,0,room_width-20,20);
}
else
{
    var msg = "Connected"
    draw_set_color(c_black)
    draw_rectangle(room_width-20+4,20-0.5*string_height(msg),room_width-4-28-string_width(msg),20+0.5*string_height(msg),0)
    draw_set_color(c_white)
    draw_text(room_width-28, 20, msg)
    draw_sprite(spr_button,1,room_width-20,20);
}

draw_set_valign(fa_top)

if (btn_pressed(20,50,"LOGOUT"))
{
    //send disconnect-client msg
    wn_write_byte(wn_msgtype("C2S", "client_disconnects"));
    wn_send_message(server_socket)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
