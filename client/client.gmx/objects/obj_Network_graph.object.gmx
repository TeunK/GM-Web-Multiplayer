<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_NetworkDisplayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>margin = 20
ping_x = 120
ping_y = 20
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(obj_Network_controller))
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw limit
var limit = min(5, obj_Network_controller.ping_history_limit)
for (i=0; i&lt;limit; i+=1)
{
    var ping = obj_Network_controller.ping[i]
    draw_set_color(c_black)
    draw_set_halign(fa_left)
    draw_text(ping_x,ping_y+margin*i, "Ping: "+ping)
}

/*************************************/
// GRAPH CREATION
//define bottom-left corner of graph
var graph_x0        = room_width-600
var graph_y0        = 200
var graph_height    = 180
var graph_width     = 580
draw_set_font(ft_mini)

//draw background
draw_set_color(c_white)
draw_rectangle(graph_x0,graph_y0,graph_x0+graph_width,graph_y0-graph_height,0)

//draw axes
draw_set_color(c_black)
draw_line(graph_x0,graph_y0,graph_x0+graph_width,graph_y0)  //horizontal
draw_line(graph_x0,graph_y0,graph_x0,graph_y0-graph_height) //vertical

//draw vertical values
var pings = obj_Network_controller.ping
var max_val = max_value(pings)
draw_set_halign(fa_right)
draw_set_color(c_black)
draw_text(graph_x0-5,graph_y0,"0ms");
var verticals = 5
for (i=1; i&lt;=verticals; i+=1)
{
    draw_set_alpha(1)
    draw_set_valign(fa_middle)
    draw_text(graph_x0-5,graph_y0-(i/verticals*graph_height),round((i/verticals)*max_val) + "ms");
    draw_set_valign(fa_top)
    //horizontal separation line
    draw_set_alpha(0.2)
    draw_line(graph_x0,graph_y0-(i/verticals*graph_height),graph_x0+graph_width,graph_y0-(i/verticals*graph_height))
}

//draw horizontal intervals
var interval_count = array_length_1d(pings)
for (i=0; i&lt;interval_count; i+=1)
{
    draw_set_alpha(1)
    draw_set_halign(fa_center)
    //draw_text(graph_x0+(graph_width/(interval_count))*i,graph_y0-5,i)
    draw_set_halign(fa_left)
    draw_set_alpha(0.2)
    //vertical separation line
    //draw_line(graph_x0+(graph_width/(interval_count)*i),graph_y0,graph_x0+graph_width/(interval_count)*i,graph_y0-graph_height)
}
draw_set_alpha(1)

//draw curves
var max_val = max_value(pings)
if (max_val == 0) {max_val = 1} //limit boundaries in case its 0
for(i=1; i&lt;interval_count; i+=1)
{
    //calculate positions
    var ping_old_val_percent    = pings[i-1] / max_val
    var ping_new_val_percent    = pings[i] / max_val
    var interval_width          = (graph_width/interval_count)
    var x_left                  = (i-1) * interval_width
    var x_right                 = (i) * interval_width
    var y_old                   = ping_old_val_percent * graph_height
    var y_new                   = ping_new_val_percent * graph_height
    
    //draw line
    draw_set_color(c_green)
    draw_line(graph_x0+x_left,graph_y0-y_old,graph_x0+x_right, graph_y0-y_new)
    draw_set_halign(fa_center)
    draw_set_color(c_black)
    draw_text(graph_x0+x_right,graph_y0-y_new-20,pings[i])
    draw_set_halign(fa_left)
}
draw_set_font(ft_main)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
