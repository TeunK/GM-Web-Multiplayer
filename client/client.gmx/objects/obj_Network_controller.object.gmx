<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_NetworkController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Our client ID as assigned by server
client_id           = -1;

//Server IP and port
server_ip           = "94.254.82.131"//"82.39.79.35"; 
server_port         = 24000;

//Connect
server_socket       = wn_connect(server_ip, server_port)

client_clock        = 0;
avg_ping            = 0;
ping_history_limit  = 40
req_rate_ping       = 60 //send x pings per second
for (i=0; i&lt;ping_history_limit; i+=1)
{
    ping[i] = 0
}

//Server details
update_timer        = room_speed //requests server-update every second
client_count        = -1
request_count       = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(wn_receive_message(server_socket))
{
    var msg_type=wn_msgtype("S2C",wn_read_byte());
    
    switch(msg_type)
    {
        case "confirm_client_id":
            //receive client_id from server
            client_id = wn_read_byte();
            
            //respond with our username
            wn_clear_buffer();
            wn_write_byte(wn_msgtype("C2S", "initial_client_details"));
            wn_write_string("client username");
            wn_send_message(server_socket)
            
            break;
            
        case "chat_message":
            //receive message from some user
            var sender          = wn_read_string();
            var chat_message    = wn_read_string();
            
            //add new message to chatbox
            obj_Chatbox.chat_contents = add_line(obj_Chatbox.chat_contents, sender, chat_message, c_white);
            
            break;
        
        case "ping":
            //receive ping time when client sent it to server
            var ping_starttime = wn_read_string();
            
            //store time (first shift each ping in history by 1)
            for (i=ping_history_limit-1; i&gt;=0; i-=1)
            {
                ping[i+1] = ping[i]
            }
            ping[0] = (string(get_timer()/1000) - ping_starttime)
            
            break;
            
        case "client_count":
            client_count = wn_read_byte();
                        
            break;
            
        case "request_count":
            request_count = wn_read_string();
            
            break;
    }
}

//request updates
if (client_clock mod update_timer == 0)
{
    //request for client-count
    wn_write_byte(wn_msgtype("C2S", "client_count"));
    wn_send_message(server_socket)   
}
else if (client_clock mod update_timer == 10)
{
    //request for request-count
    wn_write_byte(wn_msgtype("C2S", "request_count"));
    wn_send_message(server_socket)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create network displayer
if (!instance_exists(obj_Network_graph))
{
    instance_create(x,y,obj_Network_graph)
}
if (!instance_exists(obj_Server_status))
{
    instance_create(x,y,obj_Server_status)
}

//always increment clock
client_clock += 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//send disconnect-client msg
show_message("disconnect client");
wn_write_byte(wn_msgtype("C2S", "client_disconnects"));
wn_send_message(server_socket)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw server status (top-right)
draw_set_color(c_black);
draw_set_halign(fa_right);
draw_set_valign(fa_middle);
if (client_id == -1)
{
    var msg = "Attempting to establish connection to server.. ("+string(round(client_clock / room_speed))+")"
    draw_set_color(c_black)
    draw_rectangle(room_width-20+4,20-0.5*string_height(msg),room_width-4-28-string_width(msg),20+0.5*string_height(msg),0)
    draw_set_color(c_white)
    draw_text(room_width-28, 20, msg)
    draw_set_color(c_red)
}
else
{
    var msg = "Connected"
    draw_set_color(c_black)
    draw_rectangle(room_width-20+4,20-0.5*string_height(msg),room_width-4-28-string_width(msg),20+0.5*string_height(msg),0)
    draw_set_color(c_white)
    draw_text(room_width-28, 20, msg)
    draw_set_color(c_lime)
}

draw_circle(room_width-20,20,8,0);
draw_set_valign(fa_top)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// modify pinging rate
draw_set_color(c_black)
if keyboard_check(vk_up)
{
    req_rate_ping+=1    
}  
else if keyboard_check(vk_down)
{
    req_rate_ping-=1    
}  
if (req_rate_ping &lt;= 0) {req_rate_ping = 1}

//send ping request
if ((client_clock mod req_rate_ping) == 0)
{   
    wn_clear_buffer();
    wn_write_byte(wn_msgtype("C2S","ping"));
    wn_write_string(string(get_timer()/1000)); //write current client time in ms
    wn_send_message(server_socket);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
